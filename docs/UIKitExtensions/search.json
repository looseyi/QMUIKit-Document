{"Protocols/QMUIDynamicColorProtocol.html#/c:objc(pl)QMUIDynamicColorProtocol(py)qmui_rawColor":{"name":"qmui_rawColor","abstract":"<p>获取当前 color 的实际颜色（返回的颜色必定不是 dynamic color）</p>","parent_name":"QMUIDynamicColorProtocol"},"Protocols/QMUIDynamicColorProtocol.html#/c:objc(pl)QMUIDynamicColorProtocol(py)qmui_isDynamicColor":{"name":"qmui_isDynamicColor","abstract":"<p>标志当前 UIColor 对象是否为动态颜色（由 [UIColor qmui_colorWithThemeProvider:] 创建的颜色，或者 iOS 13 下由 [UIColor colorWithDynamicProvider:]、[UIColor initWithDynamicProvider:] 创建的颜色）</p>","parent_name":"QMUIDynamicColorProtocol"},"Protocols/QMUIDynamicColorProtocol.html#/c:objc(pl)QMUIDynamicColorProtocol(py)qmui_isQMUIDynamicColor":{"name":"qmui_isQMUIDynamicColor","abstract":"<p>标志当前 UIColor 对象是否为 QMUIThemeColor</p>","parent_name":"QMUIDynamicColorProtocol"},"Protocols/QMUIDynamicColorProtocol.html#/c:objc(pl)QMUIDynamicColorProtocol(py)_isDynamic":{"name":"_isDynamic","abstract":"<p>这方法其实是 iOS 13 新增的 UIDynamicColor 里的私有方法，只要任意 UIColor 的类实现这个方法并返回 YES，就能自动响应 iOS 13 下的 UIUserInterfaceStyle 的切换，这里在 protocol 里声明是为了方便 .m 里调用（否则会因为不存在的 selector 而无法编译）</p>","parent_name":"QMUIDynamicColorProtocol"},"Protocols/UINavigationControllerBackButtonHandlerProtocol.html#/c:objc(pl)UINavigationControllerBackButtonHandlerProtocol(im)shouldPopViewControllerByBackButtonOrPopGesture:":{"name":"-shouldPopViewControllerByBackButtonOrPopGesture:","abstract":"<p>点击系统返回按钮或者手势返回的时候是否要相应界面返回（手动调用代码pop排除）。支持参数判断是点击系统返回按钮还是通过手势触发","parent_name":"UINavigationControllerBackButtonHandlerProtocol"},"Protocols/UINavigationControllerBackButtonHandlerProtocol.html#/c:objc(pl)UINavigationControllerBackButtonHandlerProtocol(im)forceEnableInteractivePopGestureRecognizer":{"name":"-forceEnableInteractivePopGestureRecognizer","abstract":"<p>当自定义了<code>leftBarButtonItem</code>按钮之后，系统的手势返回就失效了。可以通过<code>forceEnableInteractivePopGestureRecognizer</code>来决定要不要把那个手势返回强制加回来。当 interactivePopGestureRecognizer.enabled = NO 或者当前<code>UINavigationController</code>堆栈的viewControllers小于2的时候此方法无效。</p>","parent_name":"UINavigationControllerBackButtonHandlerProtocol"},"Protocols/UINavigationControllerBackButtonHandlerProtocol.html":{"name":"UINavigationControllerBackButtonHandlerProtocol","abstract":"<p>拦截系统默认返回按钮事件，有时候需要在点击系统返回按钮，或者手势返回的时候想要拦截事件，比如要判断当前界面编辑的的内容是否要保存，或者返回的时候需要做一些额外的逻辑处理等等。</p>"},"Protocols/QMUIDynamicColorProtocol.html":{"name":"QMUIDynamicColorProtocol","abstract":"<p>Undocumented</p>"},"Enums/QMUICustomizeButtonPropType.html#/c:@E@QMUICustomizeButtonPropType@QMUICustomizeButtonPropTypeTitle":{"name":"QMUICustomizeButtonPropTypeTitle","abstract":"<p>Undocumented</p>","parent_name":"QMUICustomizeButtonPropType"},"Enums/QMUICustomizeButtonPropType.html#/c:@E@QMUICustomizeButtonPropType@QMUICustomizeButtonPropTypeTitleColor":{"name":"QMUICustomizeButtonPropTypeTitleColor","abstract":"<p>Undocumented</p>","parent_name":"QMUICustomizeButtonPropType"},"Enums/QMUICustomizeButtonPropType.html#/c:@E@QMUICustomizeButtonPropType@QMUICustomizeButtonPropTypeTitleShadowColor":{"name":"QMUICustomizeButtonPropTypeTitleShadowColor","abstract":"<p>Undocumented</p>","parent_name":"QMUICustomizeButtonPropType"},"Enums/QMUICustomizeButtonPropType.html#/c:@E@QMUICustomizeButtonPropType@QMUICustomizeButtonPropTypeImage":{"name":"QMUICustomizeButtonPropTypeImage","abstract":"<p>Undocumented</p>","parent_name":"QMUICustomizeButtonPropType"},"Enums/QMUICustomizeButtonPropType.html#/c:@E@QMUICustomizeButtonPropType@QMUICustomizeButtonPropTypeBackgroundImage":{"name":"QMUICustomizeButtonPropTypeBackgroundImage","abstract":"<p>Undocumented</p>","parent_name":"QMUICustomizeButtonPropType"},"Enums/QMUICustomizeButtonPropType.html#/c:@E@QMUICustomizeButtonPropType@QMUICustomizeButtonPropTypeAttributedTitle":{"name":"QMUICustomizeButtonPropTypeAttributedTitle","abstract":"<p>Undocumented</p>","parent_name":"QMUICustomizeButtonPropType"},"Enums/QMUIImageResizingMode.html#/c:@E@QMUIImageResizingMode@QMUIImageResizingModeScaleToFill":{"name":"QMUIImageResizingModeScaleToFill","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageResizingMode"},"Enums/QMUIImageResizingMode.html#/c:@E@QMUIImageResizingMode@QMUIImageResizingModeScaleAspectFit":{"name":"QMUIImageResizingModeScaleAspectFit","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageResizingMode"},"Enums/QMUIImageResizingMode.html#/c:@E@QMUIImageResizingMode@QMUIImageResizingModeScaleAspectFill":{"name":"QMUIImageResizingModeScaleAspectFill","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageResizingMode"},"Enums/QMUIImageResizingMode.html#/c:@E@QMUIImageResizingMode@QMUIImageResizingModeScaleAspectFillTop":{"name":"QMUIImageResizingModeScaleAspectFillTop","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageResizingMode"},"Enums/QMUIImageResizingMode.html#/c:@E@QMUIImageResizingMode@QMUIImageResizingModeScaleAspectFillBottom":{"name":"QMUIImageResizingModeScaleAspectFillBottom","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageResizingMode"},"Enums/QMUIImageBorderPosition.html#/c:@E@QMUIImageBorderPosition@QMUIImageBorderPositionAll":{"name":"QMUIImageBorderPositionAll","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageBorderPosition"},"Enums/QMUIImageBorderPosition.html#/c:@E@QMUIImageBorderPosition@QMUIImageBorderPositionTop":{"name":"QMUIImageBorderPositionTop","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageBorderPosition"},"Enums/QMUIImageBorderPosition.html#/c:@E@QMUIImageBorderPosition@QMUIImageBorderPositionLeft":{"name":"QMUIImageBorderPositionLeft","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageBorderPosition"},"Enums/QMUIImageBorderPosition.html#/c:@E@QMUIImageBorderPosition@QMUIImageBorderPositionBottom":{"name":"QMUIImageBorderPositionBottom","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageBorderPosition"},"Enums/QMUIImageBorderPosition.html#/c:@E@QMUIImageBorderPosition@QMUIImageBorderPositionRight":{"name":"QMUIImageBorderPositionRight","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageBorderPosition"},"Enums/QMUIImageShape.html#/c:@E@QMUIImageShape@QMUIImageShapeOval":{"name":"QMUIImageShapeOval","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageShape"},"Enums/QMUIImageShape.html#/c:@E@QMUIImageShape@QMUIImageShapeTriangle":{"name":"QMUIImageShapeTriangle","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageShape"},"Enums/QMUIImageShape.html#/c:@E@QMUIImageShape@QMUIImageShapeDisclosureIndicator":{"name":"QMUIImageShapeDisclosureIndicator","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageShape"},"Enums/QMUIImageShape.html#/c:@E@QMUIImageShape@QMUIImageShapeCheckmark":{"name":"QMUIImageShapeCheckmark","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageShape"},"Enums/QMUIImageShape.html#/c:@E@QMUIImageShape@QMUIImageShapeDetailButtonImage":{"name":"QMUIImageShapeDetailButtonImage","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageShape"},"Enums/QMUIImageShape.html#/c:@E@QMUIImageShape@QMUIImageShapeNavBack":{"name":"QMUIImageShapeNavBack","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageShape"},"Enums/QMUIImageShape.html#/c:@E@QMUIImageShape@QMUIImageShapeNavClose":{"name":"QMUIImageShapeNavClose","abstract":"<p>Undocumented</p>","parent_name":"QMUIImageShape"},"Enums/QMUITableViewCellPosition.html#/c:@E@QMUITableViewCellPosition@QMUITableViewCellPositionNone":{"name":"QMUITableViewCellPositionNone","abstract":"<p>Undocumented</p>","parent_name":"QMUITableViewCellPosition"},"Enums/QMUITableViewCellPosition.html#/c:@E@QMUITableViewCellPosition@QMUITableViewCellPositionFirstInSection":{"name":"QMUITableViewCellPositionFirstInSection","abstract":"<p>Undocumented</p>","parent_name":"QMUITableViewCellPosition"},"Enums/QMUITableViewCellPosition.html#/c:@E@QMUITableViewCellPosition@QMUITableViewCellPositionMiddleInSection":{"name":"QMUITableViewCellPositionMiddleInSection","abstract":"<p>Undocumented</p>","parent_name":"QMUITableViewCellPosition"},"Enums/QMUITableViewCellPosition.html#/c:@E@QMUITableViewCellPosition@QMUITableViewCellPositionLastInSection":{"name":"QMUITableViewCellPositionLastInSection","abstract":"<p>Undocumented</p>","parent_name":"QMUITableViewCellPosition"},"Enums/QMUITableViewCellPosition.html#/c:@E@QMUITableViewCellPosition@QMUITableViewCellPositionSingleInSection":{"name":"QMUITableViewCellPositionSingleInSection","abstract":"<p>Undocumented</p>","parent_name":"QMUITableViewCellPosition"},"Enums/QMUICornerMask.html#/c:@E@QMUICornerMask@QMUILayerMinXMinYCorner":{"name":"QMUILayerMinXMinYCorner","abstract":"<p>Undocumented</p>","parent_name":"QMUICornerMask"},"Enums/QMUICornerMask.html#/c:@E@QMUICornerMask@QMUILayerMaxXMinYCorner":{"name":"QMUILayerMaxXMinYCorner","abstract":"<p>Undocumented</p>","parent_name":"QMUICornerMask"},"Enums/QMUICornerMask.html#/c:@E@QMUICornerMask@QMUILayerMinXMaxYCorner":{"name":"QMUILayerMinXMaxYCorner","abstract":"<p>Undocumented</p>","parent_name":"QMUICornerMask"},"Enums/QMUICornerMask.html#/c:@E@QMUICornerMask@QMUILayerMaxXMaxYCorner":{"name":"QMUILayerMaxXMaxYCorner","abstract":"<p>Undocumented</p>","parent_name":"QMUICornerMask"},"Enums/QMUIFontWeight.html#/c:@E@QMUIFontWeight@QMUIFontWeightLight":{"name":"QMUIFontWeightLight","abstract":"<p>Undocumented</p>","parent_name":"QMUIFontWeight"},"Enums/QMUIFontWeight.html#/c:@E@QMUIFontWeight@QMUIFontWeightNormal":{"name":"QMUIFontWeightNormal","abstract":"<p>Undocumented</p>","parent_name":"QMUIFontWeight"},"Enums/QMUIFontWeight.html#/c:@E@QMUIFontWeight@QMUIFontWeightBold":{"name":"QMUIFontWeightBold","abstract":"<p>Undocumented</p>","parent_name":"QMUIFontWeight"},"Enums/QMUIViewBorderLocation.html#/c:@E@QMUIViewBorderLocation@QMUIViewBorderLocationInside":{"name":"QMUIViewBorderLocationInside","abstract":"<p>Undocumented</p>","parent_name":"QMUIViewBorderLocation"},"Enums/QMUIViewBorderLocation.html#/c:@E@QMUIViewBorderLocation@QMUIViewBorderLocationCenter":{"name":"QMUIViewBorderLocationCenter","abstract":"<p>Undocumented</p>","parent_name":"QMUIViewBorderLocation"},"Enums/QMUIViewBorderLocation.html#/c:@E@QMUIViewBorderLocation@QMUIViewBorderLocationOutside":{"name":"QMUIViewBorderLocationOutside","abstract":"<p>Undocumented</p>","parent_name":"QMUIViewBorderLocation"},"Enums/QMUIViewBorderPosition.html#/c:@E@QMUIViewBorderPosition@QMUIViewBorderPositionNone":{"name":"QMUIViewBorderPositionNone","abstract":"<p>Undocumented</p>","parent_name":"QMUIViewBorderPosition"},"Enums/QMUIViewBorderPosition.html#/c:@E@QMUIViewBorderPosition@QMUIViewBorderPositionTop":{"name":"QMUIViewBorderPositionTop","abstract":"<p>Undocumented</p>","parent_name":"QMUIViewBorderPosition"},"Enums/QMUIViewBorderPosition.html#/c:@E@QMUIViewBorderPosition@QMUIViewBorderPositionLeft":{"name":"QMUIViewBorderPositionLeft","abstract":"<p>Undocumented</p>","parent_name":"QMUIViewBorderPosition"},"Enums/QMUIViewBorderPosition.html#/c:@E@QMUIViewBorderPosition@QMUIViewBorderPositionBottom":{"name":"QMUIViewBorderPositionBottom","abstract":"<p>Undocumented</p>","parent_name":"QMUIViewBorderPosition"},"Enums/QMUIViewBorderPosition.html#/c:@E@QMUIViewBorderPosition@QMUIViewBorderPositionRight":{"name":"QMUIViewBorderPositionRight","abstract":"<p>Undocumented</p>","parent_name":"QMUIViewBorderPosition"},"Enums/QMUIViewBorderPosition.html":{"name":"QMUIViewBorderPosition","abstract":"<p>Undocumented</p>"},"Enums/QMUIViewBorderLocation.html":{"name":"QMUIViewBorderLocation","abstract":"<p>Undocumented</p>"},"Enums/QMUIFontWeight.html":{"name":"QMUIFontWeight","abstract":"<p>Undocumented</p>"},"Enums/QMUICornerMask.html":{"name":"QMUICornerMask","abstract":"<p>Undocumented</p>"},"Enums/QMUITableViewCellPosition.html":{"name":"QMUITableViewCellPosition","abstract":"<p>cell 在当前 section 里的位置，注意判断时要用 (var &amp; xxx) == xxx 的方式</p>"},"Enums/QMUIImageShape.html":{"name":"QMUIImageShape","abstract":"<p>Undocumented</p>"},"Enums/QMUIImageBorderPosition.html":{"name":"QMUIImageBorderPosition","abstract":"<p>Undocumented</p>"},"Enums/QMUIImageResizingMode.html":{"name":"QMUIImageResizingMode","abstract":"<p>Undocumented</p>"},"Enums/QMUICustomizeButtonPropType.html":{"name":"QMUICustomizeButtonPropType","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@QMUIViewSelfSizingHeight":{"name":"QMUIViewSelfSizingHeight","abstract":"<p>当某个 UIView 在 setFrame: 时高度传这个值，则会自动将 sizeThatFits 算出的高度设置为当前 view 的高度，相当于以下这段代码的简化：</p>"},"Constants.html#/c:@QMUICGColorOriginalColorBindKey":{"name":"QMUICGColorOriginalColorBindKey","abstract":"<p>将原本的 dynamic color 绑定到 CGColorRef 上的 key</p>"},"Constants.html#/c:@QMUILineHeightIdentity":{"name":"QMUILineHeightIdentity","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@QMUIUserInterfaceStyleWillChangeNotification":{"name":"QMUIUserInterfaceStyleWillChangeNotification","abstract":"<p>iOS 13 下当 UIUserInterfaceStyle 发生变化前的通知，可用于更新状态，例如 QMUIThemeManager 利用其来自动切换主题</p>"},"Categories/UIImageView%28QMUI%29.html#/c:objc(cs)UIImageView(py)qmui_pause":{"name":"qmui_pause","abstract":"<p>暂停/恢复当前 UIImageView 上的 animation images（包括通过 animationImages 设置的图片数组，以及通过 [UIImage animatedImage] 系列方法创建的动图）的播放，默认为 NO。</p>","parent_name":"UIImageView(QMUI)"},"Categories/UIImageView%28QMUI%29.html#/c:objc(cs)UIImageView(py)qmui_smoothAnimation":{"name":"qmui_smoothAnimation","abstract":"<p>是否要用 QMUI 提供的高性能方式去渲染由 [UIImage animatedImage] 创建的 UIImage，（系统原生的方式在 UIImageView 被放在 UIScrollView 内时会卡顿），默认为 YES。</p>","parent_name":"UIImageView(QMUI)"},"Categories/UIImageView%28QMUI%29.html#/c:objc(cs)UIImageView(im)qmui_sizeToFitKeepingImageAspectRatioInSize:":{"name":"-qmui_sizeToFitKeepingImageAspectRatioInSize:","abstract":"<p>把 UIImageView 的宽高调整为能保持 image 宽高比例不变的同时又不超过给定的 <code>limitSize</code> 大小的最大frame</p>","parent_name":"UIImageView(QMUI)"},"Categories/UIGestureRecognizer%28QMUI%29.html#/c:objc(cs)UIGestureRecognizer(py)qmui_targetView":{"name":"qmui_targetView","abstract":"<p>获取当前手势直接作用到的 view（注意与 view 属性区分开：view 属性表示手势被添加到哪个 view 上，qmui_targetView 则是 view 属性里的某个 subview）</p>","parent_name":"UIGestureRecognizer(QMUI)"},"Categories/UICollectionView%28QMUI%29.html#/c:objc(cs)UICollectionView(im)qmui_clearsSelection":{"name":"-qmui_clearsSelection","abstract":"<p>清除所有已选中的item的选中状态</p>","parent_name":"UICollectionView(QMUI)"},"Categories/UICollectionView%28QMUI%29.html#/c:objc(cs)UICollectionView(im)qmui_reloadDataKeepingSelection":{"name":"-qmui_reloadDataKeepingSelection","abstract":"<p>重新<code>reloadData</code>，同时保持<code>reloadData</code>前item的选中状态</p>","parent_name":"UICollectionView(QMUI)"},"Categories/UICollectionView%28QMUI%29.html#/c:objc(cs)UICollectionView(im)qmui_indexPathForItemAtView:":{"name":"-qmui_indexPathForItemAtView:","abstract":"<p>获取某个view在collectionView内对应的indexPath</p>","parent_name":"UICollectionView(QMUI)"},"Categories/UICollectionView%28QMUI%29.html#/c:objc(cs)UICollectionView(im)qmui_itemVisibleAtIndexPath:":{"name":"-qmui_itemVisibleAtIndexPath:","abstract":"<p>判断当前 indexPath 的 item 是否为可视的 item</p>","parent_name":"UICollectionView(QMUI)"},"Categories/UICollectionView%28QMUI%29.html#/c:objc(cs)UICollectionView(im)qmui_indexPathsForVisibleItems":{"name":"-qmui_indexPathsForVisibleItems","abstract":"<p>对系统的 indexPathsForVisibleItems 进行了排序后的结果</p>","parent_name":"UICollectionView(QMUI)"},"Categories/UICollectionView%28QMUI%29.html#/c:objc(cs)UICollectionView(im)qmui_indexPathForFirstVisibleCell":{"name":"-qmui_indexPathForFirstVisibleCell","abstract":"<p>获取可视区域内第一个cell的indexPath。</p>","parent_name":"UICollectionView(QMUI)"},"Categories/UILabel%28QMUI%29.html#/c:objc(cs)UILabel(im)qmui_initWithFont:textColor:":{"name":"-qmui_initWithFont:textColor:","abstract":"<p>Undocumented</p>","parent_name":"UILabel(QMUI)"},"Categories/UILabel%28QMUI%29.html#/c:objc(cs)UILabel(py)qmui_textAttributes":{"name":"qmui_textAttributes","abstract":"<p>@brief 在需要特殊样式时，可通过此属性直接给整个 label 添加 NSAttributeName 系列样式，然后 setText 即可，无需使用繁琐的 attributedText</p>","parent_name":"UILabel(QMUI)"},"Categories/UILabel%28QMUI%29.html#/c:objc(cs)UILabel(py)qmui_lineHeight":{"name":"qmui_lineHeight","abstract":"<p>Setter 设置当前整段文字的行高</p>","parent_name":"UILabel(QMUI)"},"Categories/UILabel%28QMUI%29.html#/c:objc(cs)UILabel(im)qmui_setTheSameAppearanceAsLabel:":{"name":"-qmui_setTheSameAppearanceAsLabel:","abstract":"<p>将目标UILabel的样式属性设置到当前UILabel上</p>","parent_name":"UILabel(QMUI)"},"Categories/UILabel%28QMUI%29.html#/c:objc(cs)UILabel(im)qmui_calculateHeightAfterSetAppearance":{"name":"-qmui_calculateHeightAfterSetAppearance","abstract":"<p>在UILabel的样式（如字体）设置完后，将label的text设置为一个测试字符，再调用sizeToFit，从而令label的高度适应字体</p>","parent_name":"UILabel(QMUI)"},"Categories/UILabel%28QMUI%29.html#/c:objc(cs)UILabel(im)qmui_avoidBlendedLayersIfShowingChineseWithBackgroundColor:":{"name":"-qmui_avoidBlendedLayersIfShowingChineseWithBackgroundColor:","abstract":"<p>UILabel在显示中文字符时，会比显示纯英文字符额外多了一个sublayers，并且这个layer超出了label.bounds的范围，这会导致label必定需要做像素合成，所以通过一些方式来避免合成操作</p>","parent_name":"UILabel(QMUI)"},"Categories/UIButton%28QMUI%29.html#/c:objc(cs)UIButton(im)qmui_initWithImage:title:":{"name":"-qmui_initWithImage:title:","abstract":"<p>Undocumented</p>","parent_name":"UIButton(QMUI)"},"Categories/UIButton%28QMUI%29.html#/c:objc(cs)UIButton(im)qmui_hasCustomizedButtonPropForState:":{"name":"-qmui_hasCustomizedButtonPropForState:","abstract":"<p>判断该 button 在特定 UIControlState 下是否设置了属性</p>","parent_name":"UIButton(QMUI)"},"Categories/UIButton%28QMUI%29.html#/c:objc(cs)UIButton(im)qmui_hasCustomizedButtonPropWithType:forState:":{"name":"-qmui_hasCustomizedButtonPropWithType:forState:","abstract":"<p>判断该 button 在特定 UIControlState 下是否设置了某个 QMUICustomizeButtonPropType 属性</p>","parent_name":"UIButton(QMUI)"},"Categories/UIButton%28QMUI%29.html#/c:objc(cs)UIButton(im)qmui_calculateHeightAfterSetAppearance":{"name":"-qmui_calculateHeightAfterSetAppearance","abstract":"<p>在UIButton的样式（如字体）设置完后，将button的text设置为一个测试字符，再调用sizeToFit，从而令button的高度适应字体</p>","parent_name":"UIButton(QMUI)"},"Categories/UIButton%28QMUI%29.html#/c:objc(cs)UIButton(im)qmui_setTitleAttributes:forState:":{"name":"-qmui_setTitleAttributes:forState:","abstract":"<p>通过这个方法设置了 attributes 之后，setTitle:forState: 会自动把文字转成 attributedString 再添加上去，无需每次都自己构造 attributedString</p>","parent_name":"UIButton(QMUI)"},"Categories/UITextField%28QMUI%29.html#/c:objc(cs)UITextField(py)qmui_selectedRange":{"name":"qmui_selectedRange","abstract":"<p>UITextField只有selectedTextRange属性（在<UITextInput>协议里定义），这里拓展了一个方法可以将UITextRange类型的selectedTextRange转换为NSRange类型的selectedRange</p>","parent_name":"UITextField(QMUI)"},"Categories/UITextField%28QMUI%29.html#/c:objc(cs)UITextField(py)qmui_clearButton":{"name":"qmui_clearButton","abstract":"<p>输入框右边的 clearButton，在 UITextField 初始化后就存在</p>","parent_name":"UITextField(QMUI)"},"Categories/UITextField%28QMUI%29.html#/c:objc(cs)UITextField(py)qmui_clearButtonImage":{"name":"qmui_clearButtonImage","abstract":"<p>自定义 clearButton 的图片，设置成nil，恢复到系统默认的图片</p>","parent_name":"UITextField(QMUI)"},"Categories/NSArray%28QMUI%29.html#/c:objc(cs)NSArray(cm)qmui_arrayWithObjects:":{"name":"+qmui_arrayWithObjects:","abstract":"<p>将多个对象合并成一个数组，如果参数类型是数组则会将数组内的元素拆解出来加到 return 内（只会拆解一层，所以多维数组不处理）</p>","parent_name":"NSArray(QMUI)"},"Categories/NSArray%28QMUI%29.html#/c:objc(cs)NSArray(im)qmui_enumerateNestedArrayWithBlock:":{"name":"-qmui_enumerateNestedArrayWithBlock:","abstract":"<p>将多维数组打平成一维数组再遍历所有子元素</p>","parent_name":"NSArray(QMUI)"},"Categories/NSArray%28QMUI%29.html#/c:objc(cs)NSArray(im)qmui_mutableCopyNestedArray":{"name":"-qmui_mutableCopyNestedArray","abstract":"<p>将多维数组递归转换成 mutable 多维数组</p>","parent_name":"NSArray(QMUI)"},"Categories/NSArray%28QMUI%29.html#/c:objc(cs)NSArray(im)qmui_filterWithBlock:":{"name":"-qmui_filterWithBlock:","abstract":"<p>过滤数组元素，将 block 返回 YES 的 item 重新组装成一个数组返回</p>","parent_name":"NSArray(QMUI)"},"Categories/NSArray%28QMUI%29.html#/c:objc(cs)NSArray(im)qmui_mapWithBlock:":{"name":"-qmui_mapWithBlock:","abstract":"<p>转换数组元素，将每个 item 都经过 block 转换成一遍 返回转换后的新数组</p>","parent_name":"NSArray(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(py)qmui_alreadyAtTop":{"name":"qmui_alreadyAtTop","abstract":"<p>判断UIScrollView是否已经处于顶部（当UIScrollView内容不够多不可滚动时，也认为是在顶部）</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(py)qmui_alreadyAtBottom":{"name":"qmui_alreadyAtBottom","abstract":"<p>判断UIScrollView是否已经处于底部（当UIScrollView内容不够多不可滚动时，也认为是在底部）</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(py)qmui_contentInset":{"name":"qmui_contentInset","abstract":"<p>UIScrollView 的真正 inset，在 iOS11 以后需要用到 adjustedContentInset 而在 iOS11 以前只需要用 contentInset</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(py)qmui_initialContentInset":{"name":"qmui_initialContentInset","abstract":"<p>UIScrollView 默认的 contentInset，会自动将 contentInset 和 scrollIndicatorInsets 都设置为这个值并且调用一次 qmui_scrollToTopUponContentInsetTopChange 设置默认的 contentOffset，一般用于 UIScrollViewContentInsetAdjustmentNever 的列表。</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(im)qmui_canScroll":{"name":"-qmui_canScroll","abstract":"<p>判断当前的scrollView内容是否足够滚动</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(im)qmui_scrollToTopForce:animated:":{"name":"-qmui_scrollToTopForce:animated:","abstract":"<p>不管当前scrollView是否可滚动，直接将其滚动到最顶部</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(im)qmui_scrollToTopAnimated:":{"name":"-qmui_scrollToTopAnimated:","abstract":"<p>等同于[self qmui_scrollToTopForce:NO animated:animated]</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(im)qmui_scrollToTop":{"name":"-qmui_scrollToTop","abstract":"<p>等同于[self qmui_scrollToTopAnimated:NO]</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(im)qmui_scrollToTopUponContentInsetTopChange":{"name":"-qmui_scrollToTopUponContentInsetTopChange","abstract":"<p>滚到列表顶部，但如果 contentInset.top 与上一次相同则不会执行滚动操作，通常用于 UIScrollViewContentInsetAdjustmentNever 的 scrollView 设置完业务的 contentInset 后将列表滚到顶部。</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(im)qmui_scrollToBottomAnimated:":{"name":"-qmui_scrollToBottomAnimated:","abstract":"<p>如果当前的scrollView可滚动，则将其滚动到最底部</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(im)qmui_scrollToBottom":{"name":"-qmui_scrollToBottom","abstract":"<p>等同于[self qmui_scrollToBottomAnimated:NO]</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(im)qmui_stopDeceleratingIfNeeded":{"name":"-qmui_stopDeceleratingIfNeeded","abstract":"<p>Undocumented</p>","parent_name":"UIScrollView(QMUI)"},"Categories/UIScrollView%28QMUI%29.html#/c:objc(cs)UIScrollView(im)qmui_setContentInset:animated:":{"name":"-qmui_setContentInset:animated:","abstract":"<p>以动画的形式修改 contentInset</p>","parent_name":"UIScrollView(QMUI)"},"Categories/NSNumber%28QMUI%29.html#/c:objc(cs)NSNumber(py)qmui_CGFloatValue":{"name":"qmui_CGFloatValue","abstract":"<p>Undocumented</p>","parent_name":"NSNumber(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(cm)qmui_colorWithHexString:":{"name":"+qmui_colorWithHexString:","abstract":"<p>使用HEX命名方式的颜色字符串生成一个UIColor对象</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_hexString":{"name":"-qmui_hexString","abstract":"<p>将当前色值转换为hex字符串，通道排序是AARRGGBB（与Android保持一致）</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_red":{"name":"-qmui_red","abstract":"<p>获取当前 UIColor 对象里的红色色值</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_green":{"name":"-qmui_green","abstract":"<p>获取当前 UIColor 对象里的绿色色值</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_blue":{"name":"-qmui_blue","abstract":"<p>获取当前 UIColor 对象里的蓝色色值</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_alpha":{"name":"-qmui_alpha","abstract":"<p>获取当前 UIColor 对象里的透明色值</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_hue":{"name":"-qmui_hue","abstract":"<p>获取当前 UIColor 对象里的 hue（色相），注意 hue 的值是一个角度，所以0和1（0°和360°）是等价的，用 return 值去做判断时要特别注意。</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_saturation":{"name":"-qmui_saturation","abstract":"<p>获取当前 UIColor 对象里的 saturation（饱和度）</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_brightness":{"name":"-qmui_brightness","abstract":"<p>获取当前 UIColor 对象里的 brightness（亮度）</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_colorWithoutAlpha":{"name":"-qmui_colorWithoutAlpha","abstract":"<p>将当前UIColor对象剥离掉alpha通道后得到的色值。相当于把当前颜色的半透明值强制设为1.0后返回</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_colorWithAlpha:backgroundColor:":{"name":"-qmui_colorWithAlpha:backgroundColor:","abstract":"<p>计算当前color叠加了alpha之后放在指定颜色的背景上的色值</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_colorWithAlphaAddedToWhite:":{"name":"-qmui_colorWithAlphaAddedToWhite:","abstract":"<p>计算当前color叠加了alpha之后放在白色背景上的色值</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_transitionToColor:progress:":{"name":"-qmui_transitionToColor:progress:","abstract":"<p>将自身变化到某个目标颜色，可通过参数progress控制变化的程度，最终得到一个纯色</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_colorIsDark":{"name":"-qmui_colorIsDark","abstract":"<p>判断当前颜色是否为深色，可用于根据不同色调动态设置不同文字颜色的场景。</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_inverseColor":{"name":"-qmui_inverseColor","abstract":"<p>@link <a href=\"http://stackoverflow.com/questions/5893261/how-to-get-inverse-color-from-uicolor\">http://stackoverflow.com/questions/5893261/how-to-get-inverse-color-from-uicolor</a> @/link</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(im)qmui_isSystemTintColor":{"name":"-qmui_isSystemTintColor","abstract":"<p>判断当前颜色是否等于系统默认的 tintColor 颜色。","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(cm)qmui_systemTintColor":{"name":"+qmui_systemTintColor","abstract":"<p>获取当前系统的默认 tintColor 色值</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(cm)qmui_colorWithBackendColor:frontColor:":{"name":"+qmui_colorWithBackendColor:frontColor:","abstract":"<p>计算两个颜色叠加之后的最终色（注意区分前景色后景色的顺序）<br/>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(cm)qmui_colorFromColor:toColor:progress:":{"name":"+qmui_colorFromColor:toColor:progress:","abstract":"<p>将颜色A变化到颜色B，可通过progress控制变化的程度</p>","parent_name":"UIColor(QMUI)"},"Categories/UIColor%28QMUI%29.html#/c:objc(cs)UIColor(cm)qmui_randomColor":{"name":"+qmui_randomColor","abstract":"<p>产生一个随机色，大部分情况下用于测试</p>","parent_name":"UIColor(QMUI)"},"Categories/UINavigationBar%28QMUI%29.html#/c:objc(cs)UINavigationBar(py)qmui_contentView":{"name":"qmui_contentView","abstract":"<p>UINavigationBar 在 iOS 11 下所有的 item 都会由 contentView 管理，只要在 UINavigationController init 完成后就能拿到 qmui_contentView 的值</p>","parent_name":"UINavigationBar(QMUI)"},"Categories/UINavigationBar%28QMUI%29.html#/c:objc(cs)UINavigationBar(py)qmui_backgroundView":{"name":"qmui_backgroundView","abstract":"<p>UINavigationBar 的背景 view，可能显示磨砂、背景图，顶部有一部分溢出到 UINavigationBar 外。</p>","parent_name":"UINavigationBar(QMUI)"},"Categories/UINavigationBar%28QMUI%29.html#/c:objc(cs)UINavigationBar(py)qmui_backgroundContentView":{"name":"qmui_backgroundContentView","abstract":"<p>qmui_backgroundView 内显示实际背景的 view，可能是磨砂或者背景图片。</p>","parent_name":"UINavigationBar(QMUI)"},"Categories/UINavigationBar%28QMUI%29.html#/c:objc(cs)UINavigationBar(py)qmui_shadowImageView":{"name":"qmui_shadowImageView","abstract":"<p>qmui_backgroundView 内的 subview，用于显示底部分隔线 shadowImage，注意这个 view 是溢出到 qmui_backgroundView 外的。若 shadowImage 为 [UIImage new]，则这个 view 的高度为 0。</p>","parent_name":"UINavigationBar(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithSize:opaque:scale:actions:":{"name":"+qmui_imageWithSize:opaque:scale:actions:","abstract":"<p>用于绘制一张图并以 UIImage 的形式返回</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(py)qmui_resizable":{"name":"qmui_resizable","abstract":"<p>当前图片是否是可拉伸/平铺的，也即通过 resizableImageWithCapInsets: 处理过的图片</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(py)qmui_sizeInPixel":{"name":"qmui_sizeInPixel","abstract":"<p>获取当前图片的像素大小，如果是多倍图，会被放大到一倍来算</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_opaque":{"name":"-qmui_opaque","abstract":"<p>判断一张图是否不存在 alpha 通道，注意 “不存在 alpha 通道” 不等价于 “不透明”。一张不透明的图有可能是存在 alpha 通道但 alpha 值为 1。</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_averageColor":{"name":"-qmui_averageColor","abstract":"<p>获取当前图片的均色，原理是将图片绘制到1px*1px的矩形内，再从当前区域取色，得到图片的均色。","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_grayImage":{"name":"-qmui_grayImage","abstract":"<p>置灰当前图片</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithAlpha:":{"name":"-qmui_imageWithAlpha:","abstract":"<p>设置一张图片的透明度</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithTintColor:":{"name":"-qmui_imageWithTintColor:","abstract":"<p>保持当前图片的形状不变，使用指定的颜色去重新渲染它，生成一张新图片并返回</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithBlendColor:":{"name":"-qmui_imageWithBlendColor:","abstract":"<p>以 CIColorBlendMode 的模式为当前图片叠加一个颜色，生成一张新图片并返回，在叠加过程中会保留图片内的纹理。</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithImageAbove:atPoint:":{"name":"-qmui_imageWithImageAbove:atPoint:","abstract":"<p>在当前图片的基础上叠加一张图片，并指定绘制叠加图片的起始位置</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithSpacingExtensionInsets:":{"name":"-qmui_imageWithSpacingExtensionInsets:","abstract":"<p>在当前图片的上下左右增加一些空白（不支持负值），通常用于调节NSAttributedString里的图片与文字的间距</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithClippedRect:":{"name":"-qmui_imageWithClippedRect:","abstract":"<p>切割出在指定位置中的图片</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithClippedCornerRadius:":{"name":"-qmui_imageWithClippedCornerRadius:","abstract":"<p>切割出在指定圆角的图片</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithClippedCornerRadius:scale:":{"name":"-qmui_imageWithClippedCornerRadius:scale:","abstract":"<p>同上，可以设置 scale</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageResizedInLimitedSize:":{"name":"-qmui_imageResizedInLimitedSize:","abstract":"<p>将原图以 QMUIImageResizingModeScaleAspectFit 的策略缩放，使其缩放后的大小不超过指定的大小，并返回缩放后的图片。缩放后的图片的倍数保持与原图一致。</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageResizedInLimitedSize:resizingMode:":{"name":"-qmui_imageResizedInLimitedSize:resizingMode:","abstract":"<p>将原图按指定的 QMUIImageResizingMode 缩放，使其缩放后的大小不超过指定的大小，并返回缩放后的图片，缩放后的图片的倍数保持与原图一致。</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageResizedInLimitedSize:resizingMode:scale:":{"name":"-qmui_imageResizedInLimitedSize:resizingMode:scale:","abstract":"<p>将原图按指定的 QMUIImageResizingMode 缩放，使其缩放后的大小不超过指定的大小，并返回缩放后的图片。</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithOrientation:":{"name":"-qmui_imageWithOrientation:","abstract":"<p>将原图进行旋转，只能选择上下左右四个方向</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithBorderColor:path:":{"name":"-qmui_imageWithBorderColor:path:","abstract":"<p>为图片加上一个border，border的路径为path</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithBorderColor:borderWidth:cornerRadius:dashedLengths:":{"name":"-qmui_imageWithBorderColor:borderWidth:cornerRadius:dashedLengths:","abstract":"<p>为图片加上一个border，border的路径为borderColor、cornerRadius和borderWidth所创建的path</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithBorderColor:borderWidth:cornerRadius:":{"name":"-qmui_imageWithBorderColor:borderWidth:cornerRadius:","abstract":"<p>Undocumented</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithBorderColor:borderWidth:borderPosition:":{"name":"-qmui_imageWithBorderColor:borderWidth:borderPosition:","abstract":"<p>为图片加上一个border（可以是任意一条边，也可以是多条组合；只能创建矩形的border，不能添加圆角）</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(im)qmui_imageWithMaskImage:usingMaskImageMode:":{"name":"-qmui_imageWithMaskImage:usingMaskImageMode:","abstract":"<p>返回一个被mask的图片</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_animatedImageWithData:":{"name":"+qmui_animatedImageWithData:","abstract":"<p>将 data 转换成 animated UIImage（如果非 animated 则转换成普通 UIImage），image 倍数为 1（与系统的 [UIImage imageWithData:] 接口一致）</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_animatedImageWithData:scale:":{"name":"+qmui_animatedImageWithData:scale:","abstract":"<p>将 data 转换成 animated UIImage（如果非 animated 则转换成普通 UIImage）</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_animatedImageNamed:":{"name":"+qmui_animatedImageNamed:","abstract":"<p>在 mainBundle 里找到对应名字的图片， 注意图片 scale 为 1，与系统的 [UIImage imageWithData:] 接口一致，若需要修改倍数，请使用 -qmui_animatedImageNamed:scale:</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_animatedImageNamed:scale:":{"name":"+qmui_animatedImageNamed:scale:","abstract":"<p>在 mainBundle 里找到对应名字的图片</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithColor:":{"name":"+qmui_imageWithColor:","abstract":"<p>创建一个size为(4, 4)的纯色的UIImage</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithColor:size:cornerRadius:":{"name":"+qmui_imageWithColor:size:cornerRadius:","abstract":"<p>创建一个纯色的UIImage</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithColor:size:cornerRadiusArray:":{"name":"+qmui_imageWithColor:size:cornerRadiusArray:","abstract":"<p>创建一个纯色的UIImage，支持为四个角设置不同的圆角</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithStrokeColor:size:path:addClip:":{"name":"+qmui_imageWithStrokeColor:size:path:addClip:","abstract":"<p>创建一个带边框路径，没有背景色的路径图片，border的路径为path</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithStrokeColor:size:lineWidth:cornerRadius:":{"name":"+qmui_imageWithStrokeColor:size:lineWidth:cornerRadius:","abstract":"<p>创建一个带边框路径，没有背景色的路径图片，border的路径为strokeColor、cornerRadius和lineWidth所创建的path</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithStrokeColor:size:lineWidth:borderPosition:":{"name":"+qmui_imageWithStrokeColor:size:lineWidth:borderPosition:","abstract":"<p>创建一个带边框路径，没有背景色的路径图片（可以是任意一条边，也可以是多条组合；只能创建矩形的border，不能添加圆角）</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithShape:size:tintColor:":{"name":"+qmui_imageWithShape:size:tintColor:","abstract":"<p>创建一个指定大小和颜色的形状图片</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithShape:size:lineWidth:tintColor:":{"name":"+qmui_imageWithShape:size:lineWidth:tintColor:","abstract":"<p>创建一个指定大小和颜色的形状图片</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithAttributedString:":{"name":"+qmui_imageWithAttributedString:","abstract":"<p>将文字渲染成图片，最终图片和文字一样大</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithView:":{"name":"+qmui_imageWithView:","abstract":"<p>对传进来的 <code>UIView</code> 截图，生成一个 <code>UIImage</code> 并返回。注意这里使用的是 view.layer 来渲染图片内容。</p>","parent_name":"UIImage(QMUI)"},"Categories/UIImage%28QMUI%29.html#/c:objc(cs)UIImage(cm)qmui_imageWithView:afterScreenUpdates:":{"name":"+qmui_imageWithView:afterScreenUpdates:","abstract":"<p>对传进来的 <code>UIView</code> 截图，生成一个 <code>UIImage</code> 并返回。注意这里使用的是 iOS 7的系统截图接口。</p>","parent_name":"UIImage(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(im)qmui_styledAsQMUITableView":{"name":"-qmui_styledAsQMUITableView","abstract":"<p>将当前tableView按照QMUI统一定义的宏来渲染外观</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(im)qmui_indexPathForRowAtView:":{"name":"-qmui_indexPathForRowAtView:","abstract":"<p>获取某个 view 在 tableView 里的 indexPath</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(im)qmui_indexForSectionHeaderAtView:":{"name":"-qmui_indexForSectionHeaderAtView:","abstract":"<p>计算某个 view 处于当前 tableView 里的哪个 sectionHeaderView 内</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(py)qmui_indexForVisibleSectionHeaders":{"name":"qmui_indexForVisibleSectionHeaders","abstract":"<p>获取可视范围内的所有 sectionHeader 的 index</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(py)qmui_indexOfPinnedSectionHeader":{"name":"qmui_indexOfPinnedSectionHeader","abstract":"<p>获取正处于 pinned（悬停在顶部）状态的 sectionHeader 的序号</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(im)qmui_isHeaderPinnedForSection:":{"name":"-qmui_isHeaderPinnedForSection:","abstract":"<p>判断给定的 section 的 header 是否处于 pinned 状态</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(im)qmui_cellVisibleAtIndexPath:":{"name":"-qmui_cellVisibleAtIndexPath:","abstract":"<p>判断当前 indexPath 的 item 是否为可视的 item</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(im)qmui_positionForRowAtIndexPath:":{"name":"-qmui_positionForRowAtIndexPath:","abstract":"<p>根据给定的indexPath，配合dataSource得到对应的cell在当前section中所处的位置</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(im)qmui_clearsSelection":{"name":"-qmui_clearsSelection","abstract":"<p>取消选择状态</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(im)qmui_scrollToRowFittingOffsetY:atIndexPath:animated:":{"name":"-qmui_scrollToRowFittingOffsetY:atIndexPath:animated:","abstract":"<p>将指定的row滚到指定的位置（row的顶边缘和指定位置重叠），并对一些特殊情况做保护（例如列表内容不够一屏、要滚动的row是最后一条等）</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(py)qmui_realContentSize":{"name":"qmui_realContentSize","abstract":"<p>当tableHeaderView为UISearchBar时，tableView为了实现searchbar滚到顶部自动吸附的效果，会强制让self.contentSize.height至少为frame.size.height那么高（这样才能滚动，否则不满一屏就无法滚动了），所以此时如果通过self.contentSize获取tableView的内容大小是不准确的，此时可以使用<code>qmui_realContentSize</code>替代。</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(im)qmui_canScroll":{"name":"-qmui_canScroll","abstract":"<p>UITableView的tableHeaderView如果是UISearchBar的话，tableView.contentSize会强制设置为至少比bounds高（从而实现headerView的吸附效果），从而导致qmui_canScroll的判断不准确。所以为UITableView重写了qmui_canScroll方法</p>","parent_name":"UITableView(QMUI)"},"Categories/UITableView%28QMUI%29.html#/c:objc(cs)UITableView(im)qmui_performBatchUpdates:completion:":{"name":"-qmui_performBatchUpdates:completion:","abstract":"<p>等同于 UITableView 自 iOS 11 开始新增的同名方法，但兼容 iOS 11 以下的系统使用。</p>","parent_name":"UITableView(QMUI)"},"Categories/UIControl%28QMUI%29.html#/c:objc(cs)UIControl(py)qmui_automaticallyAdjustTouchHighlightedInScrollView":{"name":"qmui_automaticallyAdjustTouchHighlightedInScrollView","abstract":"<p>是否接管 UIControl 的 touch 事件。</p>","parent_name":"UIControl(QMUI)"},"Categories/UIControl%28QMUI%29.html#/c:objc(cs)UIControl(py)qmui_outsideEdge":{"name":"qmui_outsideEdge","abstract":"<p>响应区域需要改变的大小，负值表示往外扩大，正值表示往内缩小</p>","parent_name":"UIControl(QMUI)"},"Categories/UIControl%28QMUI%29.html#/c:objc(cs)UIControl(py)qmui_setHighlightedBlock":{"name":"qmui_setHighlightedBlock","abstract":"<p>setHighlighted: 方法的回调 block</p>","parent_name":"UIControl(QMUI)"},"Categories/UIControl%28QMUI%29.html#/c:objc(cs)UIControl(py)qmui_tapBlock":{"name":"qmui_tapBlock","abstract":"<p>等同于 addTarget:action:forControlEvents:UIControlEventTouchUpInside</p>","parent_name":"UIControl(QMUI)"},"Categories/CALayer%28QMUI_DynamicColor%29.html#/c:objc(cs)CALayer(im)qmui_setNeedsUpdateDynamicStyle":{"name":"-qmui_setNeedsUpdateDynamicStyle","abstract":"<p>如果 layer 的 backgroundColor、borderColor、shadowColor 是使用 dynamic color（UIDynamicProviderColor、QMUIThemeColor 等）生成的，则调用这个方法可以重新设置一遍这些属性，从而更新颜色","parent_name":"CALayer(QMUI_DynamicColor)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(py)qmui_isRootLayerOfView":{"name":"qmui_isRootLayerOfView","abstract":"<p>是否为某个 UIView 自带的 layer</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(py)qmui_pause":{"name":"qmui_pause","abstract":"<p>暂停/恢复当前 layer 上的所有动画</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(py)qmui_maskedCorners":{"name":"qmui_maskedCorners","abstract":"<p>设置四个角是否支持圆角的，iOS11 及以上会调用系统的接口，否则 QMUI 额外实现</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(py)qmui_originCornerRadius":{"name":"qmui_originCornerRadius","abstract":"<p>iOS11 以下 layer 自身的 cornerRadius 一直都是 0，圆角的是通过 mask 做的，qmui_originCornerRadius 保存了当前的圆角</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(im)qmui_sendSublayerToBack:":{"name":"-qmui_sendSublayerToBack:","abstract":"<p>把某个 sublayer 移动到当前所有 sublayers 的最后面</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(im)qmui_bringSublayerToFront:":{"name":"-qmui_bringSublayerToFront:","abstract":"<p>把某个 sublayer 移动到当前所有 sublayers 的最前面</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(im)qmui_removeDefaultAnimations":{"name":"-qmui_removeDefaultAnimations","abstract":"<p>移除 CALayer（包括 CAShapeLayer 和 CAGradientLayer）所有支持动画的属性的默认动画，方便需要一个不带动画的 layer 时使用。</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(cm)qmui_performWithoutAnimation:":{"name":"+qmui_performWithoutAnimation:","abstract":"<p>对 CALayer 执行一些操作，不以动画的形式展示过程（默认情况下修改 CALayer 的属性都会以动画形式展示出来）。</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(cm)qmui_separatorDashLayerWithLineLength:lineSpacing:lineWidth:lineColor:isHorizontal:":{"name":"+qmui_separatorDashLayerWithLineLength:lineSpacing:lineWidth:lineColor:isHorizontal:","abstract":"<p>生成虚线的方法，注意返回的是 CAShapeLayer</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(cm)qmui_separatorDashLayerInHorizontal":{"name":"+qmui_separatorDashLayerInHorizontal","abstract":"<p>产生一个通用分隔虚线的 layer，高度为 PixelOne，线宽为 2，线距为 2，默认会移除动画，并且背景色用 UIColorSeparator，注意返回的是 CAShapeLayer。</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(cm)qmui_separatorDashLayerInVertical":{"name":"+qmui_separatorDashLayerInVertical","abstract":"<p>Undocumented</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(cm)qmui_separatorLayer":{"name":"+qmui_separatorLayer","abstract":"<p>产生一个适用于做通用分隔线的 layer，高度为 PixelOne，默认会移除动画，并且背景色用 UIColorSeparator</p>","parent_name":"CALayer(QMUI)"},"Categories/CALayer%28QMUI%29.html#/c:objc(cs)CALayer(cm)qmui_separatorLayerForTableView":{"name":"+qmui_separatorLayerForTableView","abstract":"<p>产生一个适用于做列表分隔线的 layer，高度为 PixelOne，默认会移除动画，并且背景色用 TableViewSeparatorColor</p>","parent_name":"CALayer(QMUI)"},"Categories/UINavigationController%28QMUI%29.html#/c:objc(cs)UINavigationController(py)qmui_isPushing":{"name":"qmui_isPushing","abstract":"<p>是否在 push 的过程中</p>","parent_name":"UINavigationController(QMUI)"},"Categories/UINavigationController%28QMUI%29.html#/c:objc(cs)UINavigationController(py)qmui_isPopping":{"name":"qmui_isPopping","abstract":"<p>是否在 pop 的过程中，包括手势、以及代码触发的 pop</p>","parent_name":"UINavigationController(QMUI)"},"Categories/UINavigationController%28QMUI%29.html#/c:objc(cs)UINavigationController(py)qmui_topViewController":{"name":"qmui_topViewController","abstract":"<p>获取顶部的 ViewController，相比于系统的方法，这个方法能获取到 pop 的转场过程中顶部还没有完全消失的 ViewController （请注意：这种情况下，获取到的 topViewController 已经不在栈内）</p>","parent_name":"UINavigationController(QMUI)"},"Categories/UINavigationController%28QMUI%29.html#/c:objc(cs)UINavigationController(py)qmui_rootViewController":{"name":"qmui_rootViewController","abstract":"<p>获取<b>rootViewController</b></p>","parent_name":"UINavigationController(QMUI)"},"Categories/UINavigationController%28QMUI%29.html#/c:objc(cs)UINavigationController(py)qmui_interactivePopGestureRecognizerDelegate":{"name":"qmui_interactivePopGestureRecognizerDelegate","abstract":"<p>QMUI 会修改 UINavigationController.interactivePopGestureRecognizer.delegate 的值，因此提供一个属性用于获取系统原始的值</p>","parent_name":"UINavigationController(QMUI)"},"Categories/UINavigationController%28QMUI%29.html#/c:objc(cs)UINavigationController(im)qmui_pushViewController:animated:completion:":{"name":"-qmui_pushViewController:animated:completion:","abstract":"<p>Undocumented</p>","parent_name":"UINavigationController(QMUI)"},"Categories/UINavigationController%28QMUI%29.html#/c:objc(cs)UINavigationController(im)qmui_popViewControllerAnimated:completion:":{"name":"-qmui_popViewControllerAnimated:completion:","abstract":"<p>Undocumented</p>","parent_name":"UINavigationController(QMUI)"},"Categories/UINavigationController%28QMUI%29.html#/c:objc(cs)UINavigationController(im)qmui_popToViewController:animated:completion:":{"name":"-qmui_popToViewController:animated:completion:","abstract":"<p>Undocumented</p>","parent_name":"UINavigationController(QMUI)"},"Categories/UINavigationController%28QMUI%29.html#/c:objc(cs)UINavigationController(im)qmui_popToRootViewControllerAnimated:completion:":{"name":"-qmui_popToRootViewControllerAnimated:completion:","abstract":"<p>Undocumented</p>","parent_name":"UINavigationController(QMUI)"},"Categories/NSString%28QMUI_StringFormat%29.html#/c:objc(cs)NSString(cm)qmui_stringWithNSInteger:":{"name":"+qmui_stringWithNSInteger:","abstract":"<p>Undocumented</p>","parent_name":"NSString(QMUI_StringFormat)"},"Categories/NSString%28QMUI_StringFormat%29.html#/c:objc(cs)NSString(cm)qmui_stringWithCGFloat:":{"name":"+qmui_stringWithCGFloat:","abstract":"<p>Undocumented</p>","parent_name":"NSString(QMUI_StringFormat)"},"Categories/NSString%28QMUI_StringFormat%29.html#/c:objc(cs)NSString(cm)qmui_stringWithCGFloat:decimal:":{"name":"+qmui_stringWithCGFloat:decimal:","abstract":"<p>Undocumented</p>","parent_name":"NSString(QMUI_StringFormat)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(py)qmui_toArray":{"name":"qmui_toArray","abstract":"<p>将字符串按一个一个字符拆成数组，类似 JavaScript 里的 split(&ldquo;&rdquo;)，如果多个空格，则每个空格也会当成一个 item</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(py)qmui_toTrimmedArray":{"name":"qmui_toTrimmedArray","abstract":"<p>将字符串按一个一个字符拆成数组，类似 JavaScript 里的 split(&ldquo;&rdquo;)，但会自动过滤掉空白字符</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(py)qmui_trim":{"name":"qmui_trim","abstract":"<p>去掉头尾的空白字符</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(py)qmui_trimAllWhiteSpace":{"name":"qmui_trimAllWhiteSpace","abstract":"<p>去掉整段文字内的所有空白字符（包括换行符）</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(py)qmui_trimLineBreakCharacter":{"name":"qmui_trimLineBreakCharacter","abstract":"<p>将文字中的换行符替换为空格</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(py)qmui_md5":{"name":"qmui_md5","abstract":"<p>把该字符串转换为对应的 md5</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(py)qmui_stringByEncodingUserInputQuery":{"name":"qmui_stringByEncodingUserInputQuery","abstract":"<p>返回一个符合 query value 要求的编码后的字符串，例如&amp;、#、=等字符均会被变为 %xxx 的编码</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(py)qmui_capitalizedString":{"name":"qmui_capitalizedString","abstract":"<p>把当前文本的第一个字符改为大写，其他的字符保持不变，例如 backgroundView.qmui_capitalizedString -&gt; BackgroundView（系统的 capitalizedString 会变成 Backgroundview）</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(py)qmui_removeMagicalChar":{"name":"qmui_removeMagicalChar","abstract":"<p>用正则表达式匹配的方式去除字符串里一些特殊字符，避免UI上的展示问题","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(py)qmui_lengthWhenCountingNonASCIICharacterAsTwo":{"name":"qmui_lengthWhenCountingNonASCIICharacterAsTwo","abstract":"<p>按照中文 2 个字符、英文 1 个字符的方式来计算文本长度</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(im)qmui_substringAvoidBreakingUpCharacterSequencesFromIndex:lessValue:countingNonASCIICharacterAsTwo:":{"name":"-qmui_substringAvoidBreakingUpCharacterSequencesFromIndex:lessValue:countingNonASCIICharacterAsTwo:","abstract":"<p>将字符串从指定的 index 开始裁剪到结尾，裁剪时会避免将 emoji 等 &ldquo;character sequences&rdquo; 拆散（一个 emoji 表情占用1-4个长度的字符）。</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(im)qmui_substringAvoidBreakingUpCharacterSequencesFromIndex:":{"name":"-qmui_substringAvoidBreakingUpCharacterSequencesFromIndex:","abstract":"<p>相当于 <code>qmui_substringAvoidBreakingUpCharacterSequencesFromIndex: lessValue:YES</code> countingNonASCIICharacterAsTwo:NO</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(im)qmui_substringAvoidBreakingUpCharacterSequencesToIndex:lessValue:countingNonASCIICharacterAsTwo:":{"name":"-qmui_substringAvoidBreakingUpCharacterSequencesToIndex:lessValue:countingNonASCIICharacterAsTwo:","abstract":"<p>将字符串从开头裁剪到指定的 index，裁剪时会避免将 emoji 等 &ldquo;character sequences&rdquo; 拆散（一个 emoji 表情占用1-4个长度的字符）。</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(im)qmui_substringAvoidBreakingUpCharacterSequencesToIndex:":{"name":"-qmui_substringAvoidBreakingUpCharacterSequencesToIndex:","abstract":"<p>相当于 <code>qmui_substringAvoidBreakingUpCharacterSequencesToIndex:lessValue:YES</code> countingNonASCIICharacterAsTwo:NO</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(im)qmui_substringAvoidBreakingUpCharacterSequencesWithRange:lessValue:countingNonASCIICharacterAsTwo:":{"name":"-qmui_substringAvoidBreakingUpCharacterSequencesWithRange:lessValue:countingNonASCIICharacterAsTwo:","abstract":"<p>将字符串里指定 range 的子字符串裁剪出来，会避免将 emoji 等 &ldquo;character sequences&rdquo; 拆散（一个 emoji 表情占用1-4个长度的字符）。</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(im)qmui_substringAvoidBreakingUpCharacterSequencesWithRange:":{"name":"-qmui_substringAvoidBreakingUpCharacterSequencesWithRange:","abstract":"<p>相当于 <code>qmui_substringAvoidBreakingUpCharacterSequencesWithRange:lessValue:YES</code> countingNonASCIICharacterAsTwo:NO</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(im)qmui_stringByRemoveCharacterAtIndex:":{"name":"-qmui_stringByRemoveCharacterAtIndex:","abstract":"<p>移除指定位置的字符，可兼容emoji表情的情况（一个emoji表情占1-4个length）</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(im)qmui_stringByRemoveLastCharacter":{"name":"-qmui_stringByRemoveLastCharacter","abstract":"<p>移除最后一个字符，可兼容emoji表情的情况（一个emoji表情占1-4个length）</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(im)qmui_stringMatchedByPattern:":{"name":"-qmui_stringMatchedByPattern:","abstract":"<p>用正则表达式匹配字符串，将匹配到的第一个结果返回，大小写不敏感</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(im)qmui_stringByReplacingPattern:withString:":{"name":"-qmui_stringByReplacingPattern:withString:","abstract":"<p>用正则表达式匹配字符串并将其替换为指定的另一个字符串，大小写不敏感</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(cm)qmui_hexStringWithInteger:":{"name":"+qmui_hexStringWithInteger:","abstract":"<p>把某个十进制数字转换成十六进制的数字的字符串，例如“10”-&gt;“A”</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(cm)qmui_stringByConcat:":{"name":"+qmui_stringByConcat:","abstract":"<p>把参数列表拼接成一个字符串并返回，相当于用另一种语法来代替 [NSString stringWithFormat:]</p>","parent_name":"NSString(QMUI)"},"Categories/NSString%28QMUI%29.html#/c:objc(cs)NSString(cm)qmui_timeStringWithMinsAndSecsFromSecs:":{"name":"+qmui_timeStringWithMinsAndSecsFromSecs:","abstract":"<p>将秒数转换为同时包含分钟和秒数的格式的字符串，例如 100-&gt;&ldquo;01:40&rdquo;</p>","parent_name":"NSString(QMUI)"},"Categories/NSPointerArray%28QMUI%29.html#/c:objc(cs)NSPointerArray(im)qmui_indexOfPointer:":{"name":"-qmui_indexOfPointer:","abstract":"<p>Undocumented</p>","parent_name":"NSPointerArray(QMUI)"},"Categories/NSPointerArray%28QMUI%29.html#/c:objc(cs)NSPointerArray(im)qmui_containsPointer:":{"name":"-qmui_containsPointer:","abstract":"<p>Undocumented</p>","parent_name":"NSPointerArray(QMUI)"},"Categories/NSMethodSignature%28QMUI%29.html#/c:objc(cs)NSMethodSignature(cpy)qmui_avoidExceptionSignature":{"name":"qmui_avoidExceptionSignature","abstract":"<p>返回一个避免 crash 的方法签名，用于重写 methodSignatureForSelector: 时作为垫底的 return 方案</p>","parent_name":"NSMethodSignature(QMUI)"},"Categories/NSMethodSignature%28QMUI%29.html#/c:objc(cs)NSMethodSignature(py)qmui_typeString":{"name":"qmui_typeString","abstract":"<p>以 NSString 格式返回当前 NSMethodSignature 的 typeEncoding，例如 v@:</p>","parent_name":"NSMethodSignature(QMUI)"},"Categories/NSMethodSignature%28QMUI%29.html#/c:objc(cs)NSMethodSignature(py)qmui_typeEncoding":{"name":"qmui_typeEncoding","abstract":"<p>以 const char 格式返回当前 NSMethodSignature 的 typeEncoding，例如 v@:</p>","parent_name":"NSMethodSignature(QMUI)"},"Categories/UIFont%28QMUI%29.html#/c:objc(cs)UIFont(cm)qmui_lightSystemFontOfSize:":{"name":"+qmui_lightSystemFontOfSize:","abstract":"<p>返回系统字体的细体</p>","parent_name":"UIFont(QMUI)"},"Categories/UIFont%28QMUI%29.html#/c:objc(cs)UIFont(cm)qmui_systemFontOfSize:weight:italic:":{"name":"+qmui_systemFontOfSize:weight:italic:","abstract":"<p>根据需要生成一个 UIFont 对象并返回</p>","parent_name":"UIFont(QMUI)"},"Categories/UIFont%28QMUI%29.html#/c:objc(cs)UIFont(cm)qmui_dynamicSystemFontOfSize:weight:italic:":{"name":"+qmui_dynamicSystemFontOfSize:weight:italic:","abstract":"<p>根据需要生成一个支持响应动态字体大小调整的 UIFont 对象并返回</p>","parent_name":"UIFont(QMUI)"},"Categories/UIFont%28QMUI%29.html#/c:objc(cs)UIFont(cm)qmui_dynamicSystemFontOfSize:upperLimitSize:lowerLimitSize:weight:italic:":{"name":"+qmui_dynamicSystemFontOfSize:upperLimitSize:lowerLimitSize:weight:italic:","abstract":"<p>返回支持动态字体的UIFont，支持定义最小和最大字号</p>","parent_name":"UIFont(QMUI)"},"Categories/NSThread%28QMUI_KVC%29.html#/c:objc(cs)NSThread(py)qmui_shouldIgnoreUIKVCAccessProhibited":{"name":"qmui_shouldIgnoreUIKVCAccessProhibited","abstract":"<p>是否将当前线程标记为忽略系统的 KVC access prohibited 警告，默认为 NO，当开启后，NSException 将不会再抛出 access prohibited 异常</p>","parent_name":"NSThread(QMUI_KVC)"},"Categories/NSObject%28QMUI_Debug%29.html#/c:objc(cs)NSObject(im)qmui_methodList":{"name":"-qmui_methodList","abstract":"<p>获取当前对象的所有 @property、方法，父类的方法也会分别列出</p>","parent_name":"NSObject(QMUI_Debug)"},"Categories/NSObject%28QMUI_Debug%29.html#/c:objc(cs)NSObject(im)qmui_shortMethodList":{"name":"-qmui_shortMethodList","abstract":"<p>获取当前对象的所有 @property、方法，不包含父类的</p>","parent_name":"NSObject(QMUI_Debug)"},"Categories/NSObject%28QMUI_Debug%29.html#/c:objc(cs)NSObject(im)qmui_ivarList":{"name":"-qmui_ivarList","abstract":"<p>获取当前对象的所有 Ivar 变量</p>","parent_name":"NSObject(QMUI_Debug)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_bindObject:forKey:":{"name":"-qmui_bindObject:forKey:","abstract":"<p>给对象绑定上另一个对象以供后续取出使用，如果 object 传入 nil 则会清除该 key 之前绑定的对象</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_bindObjectWeakly:forKey:":{"name":"-qmui_bindObjectWeakly:forKey:","abstract":"<p>给对象绑定上另一个对象以供后续取出使用，但相比于 qmui_bindObject:forKey:，该方法不会 strong 强引用传入的 object</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_getBoundObjectForKey:":{"name":"-qmui_getBoundObjectForKey:","abstract":"<p>取出之前使用 bind 方法绑定的对象</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_bindDouble:forKey:":{"name":"-qmui_bindDouble:forKey:","abstract":"<p>给对象绑定上一个 double 值以供后续取出使用</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_getBoundDoubleForKey:":{"name":"-qmui_getBoundDoubleForKey:","abstract":"<p>取出之前用 bindDouble:forKey: 绑定的值</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_bindBOOL:forKey:":{"name":"-qmui_bindBOOL:forKey:","abstract":"<p>给对象绑定上一个 BOOL 值以供后续取出使用</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_getBoundBOOLForKey:":{"name":"-qmui_getBoundBOOLForKey:","abstract":"<p>取出之前用 bindBOOL:forKey: 绑定的值</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_bindLong:forKey:":{"name":"-qmui_bindLong:forKey:","abstract":"<p>给对象绑定上一个 long 值以供后续取出使用</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_getBoundLongForKey:":{"name":"-qmui_getBoundLongForKey:","abstract":"<p>取出之前用 bindLong:forKey: 绑定的值</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_clearBindingForKey:":{"name":"-qmui_clearBindingForKey:","abstract":"<p>移除之前使用 bind 方法绑定的对象</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_clearAllBinding":{"name":"-qmui_clearAllBinding","abstract":"<p>移除之前使用 bind 方法绑定的所有对象</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_allBindingKeys":{"name":"-qmui_allBindingKeys","abstract":"<p>返回当前有绑定对象存在的所有的 key 的数组，如果不存在任何 key，则返回一个空数组</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_DataBind%29.html#/c:objc(cs)NSObject(im)qmui_hasBindingKey:":{"name":"-qmui_hasBindingKey:","abstract":"<p>返回是否设置了某个 key</p>","parent_name":"NSObject(QMUI_DataBind)"},"Categories/NSObject%28QMUI_KeyValueCoding%29.html#/c:objc(cs)NSObject(im)qmui_valueForKey:":{"name":"-qmui_valueForKey:","abstract":"<p>iOS 13 下系统禁止通过 KVC 访问私有 API，因此提供这种方式在遇到 access prohibited 的异常时可以取代 valueForKey: 使用。</p>","parent_name":"NSObject(QMUI_KeyValueCoding)"},"Categories/NSObject%28QMUI_KeyValueCoding%29.html#/c:objc(cs)NSObject(im)qmui_setValue:forKey:":{"name":"-qmui_setValue:forKey:","abstract":"<p>iOS 13 下系统禁止通过 KVC 访问私有 API，因此提供这种方式在遇到 access prohibited 的异常时可以取代 setValue:forKey: 使用。</p>","parent_name":"NSObject(QMUI_KeyValueCoding)"},"Categories/NSObject%28QMUI_KeyValueCoding%29.html#/c:objc(cs)NSObject(im)qmui_canGetValueForKey:":{"name":"-qmui_canGetValueForKey:","abstract":"<p>检查给定的 key 是否可以用于当前对象的 valueForKey: 调用。</p>","parent_name":"NSObject(QMUI_KeyValueCoding)"},"Categories/NSObject%28QMUI_KeyValueCoding%29.html#/c:objc(cs)NSObject(im)qmui_canSetValueForKey:":{"name":"-qmui_canSetValueForKey:","abstract":"<p>检查给定的 key 是否可以用于当前对象的 setValue:forKey: 调用。</p>","parent_name":"NSObject(QMUI_KeyValueCoding)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(im)qmui_hasOverrideMethod:ofSuperclass:":{"name":"-qmui_hasOverrideMethod:ofSuperclass:","abstract":"<p>判断当前类是否有重写某个父类的指定方法</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(cm)qmui_hasOverrideMethod:forClass:ofSuperclass:":{"name":"+qmui_hasOverrideMethod:forClass:ofSuperclass:","abstract":"<p>判断指定的类是否有重写某个父类的指定方法</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(im)qmui_performSelectorToSuperclass:":{"name":"-qmui_performSelectorToSuperclass:","abstract":"<p>对 super 发送消息</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(im)qmui_performSelectorToSuperclass:withObject:":{"name":"-qmui_performSelectorToSuperclass:withObject:","abstract":"<p>对 super 发送消息</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(im)qmui_performSelector:withPrimitiveReturnValue:":{"name":"-qmui_performSelector:withPrimitiveReturnValue:","abstract":"<p>调用一个无参数、返回值类型为非对象的 selector。如果返回值类型为对象，请直接使用系统的 performSelector: 方法。</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(im)qmui_performSelector:withArguments:":{"name":"-qmui_performSelector:withArguments:","abstract":"<p>调用一个带参数的 selector，参数类型支持对象和非对象，也没有数量限制。返回值为对象或者 void。</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(im)qmui_performSelector:withPrimitiveReturnValue:arguments:":{"name":"-qmui_performSelector:withPrimitiveReturnValue:arguments:","abstract":"<p>调用一个返回值类型为非对象且带参数的 selector，参数类型支持对象和非对象，也没有数量限制。</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(im)qmui_enumrateIvarsUsingBlock:":{"name":"-qmui_enumrateIvarsUsingBlock:","abstract":"<p>使用 block 遍历指定 class 的所有成员变量（也即 _xxx 那种），不包含 property 对应的 _property 成员变量，也不包含 superclasses 里定义的变量</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(cm)qmui_enumrateIvarsOfClass:includingInherited:usingBlock:":{"name":"+qmui_enumrateIvarsOfClass:includingInherited:usingBlock:","abstract":"<p>使用 block 遍历指定 class 的所有成员变量（也即 _xxx 那种），不包含 property 对应的 _property 成员变量</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(im)qmui_enumratePropertiesUsingBlock:":{"name":"-qmui_enumratePropertiesUsingBlock:","abstract":"<p>使用 block 遍历指定 class 的所有属性，不包含 superclasses 里定义的 property</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(cm)qmui_enumratePropertiesOfClass:includingInherited:usingBlock:":{"name":"+qmui_enumratePropertiesOfClass:includingInherited:usingBlock:","abstract":"<p>使用 block 遍历指定 class 的所有属性</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(im)qmui_enumrateInstanceMethodsUsingBlock:":{"name":"-qmui_enumrateInstanceMethodsUsingBlock:","abstract":"<p>使用 block 遍历当前实例的所有方法，不包含 superclasses 里定义的 method</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(cm)qmui_enumrateInstanceMethodsOfClass:includingInherited:usingBlock:":{"name":"+qmui_enumrateInstanceMethodsOfClass:includingInherited:usingBlock:","abstract":"<p>使用 block 遍历指定的某个类的实例方法</p>","parent_name":"NSObject(QMUI)"},"Categories/NSObject%28QMUI%29.html#/c:objc(cs)NSObject(cm)qmui_enumerateProtocolMethods:usingBlock:":{"name":"+qmui_enumerateProtocolMethods:usingBlock:","abstract":"<p>遍历某个 protocol 里的所有方法</p>","parent_name":"NSObject(QMUI)"},"Categories/NSMutableParagraphStyle%28QMUI%29.html#/c:objc(cs)NSMutableParagraphStyle(cm)qmui_paragraphStyleWithLineHeight:":{"name":"+qmui_paragraphStyleWithLineHeight:","abstract":"<p>快速创建一个NSMutableParagraphStyle，等同于<code>qmui_paragraphStyleWithLineHeight:lineBreakMode:NSLineBreakByWordWrapping textAlignment:NSTextAlignmentLeft</code></p>","parent_name":"NSMutableParagraphStyle(QMUI)"},"Categories/NSMutableParagraphStyle%28QMUI%29.html#/c:objc(cs)NSMutableParagraphStyle(cm)qmui_paragraphStyleWithLineHeight:lineBreakMode:":{"name":"+qmui_paragraphStyleWithLineHeight:lineBreakMode:","abstract":"<p>快速创建一个NSMutableParagraphStyle，等同于<code>qmui_paragraphStyleWithLineHeight:lineBreakMode:textAlignment:NSTextAlignmentLeft</code></p>","parent_name":"NSMutableParagraphStyle(QMUI)"},"Categories/NSMutableParagraphStyle%28QMUI%29.html#/c:objc(cs)NSMutableParagraphStyle(cm)qmui_paragraphStyleWithLineHeight:lineBreakMode:textAlignment:":{"name":"+qmui_paragraphStyleWithLineHeight:lineBreakMode:textAlignment:","abstract":"<p>快速创建一个NSMutableParagraphStyle</p>","parent_name":"NSMutableParagraphStyle(QMUI)"},"Categories/NSURL%28QMUI%29.html#/c:objc(cs)NSURL(py)qmui_queryItems":{"name":"qmui_queryItems","abstract":"<p>获取当前 query 的参数列表。</p>","parent_name":"NSURL(QMUI)"},"Categories/UIBarItem%28QMUI%29.html#/c:objc(cs)UIBarItem(py)qmui_view":{"name":"qmui_view","abstract":"<p>获取 UIBarItem（UIBarButtonItem、UITabBarItem） 内部的 view，通常对于 navigationItem 而言，需要在设置了 navigationItem 后并且在 navigationBar 可见时（例如 viewDidAppear: 及之后）获取 UIBarButtonItem.qmui_view 才有值。</p>","parent_name":"UIBarItem(QMUI)"},"Categories/UIBarItem%28QMUI%29.html#/c:objc(cs)UIBarItem(py)qmui_viewDidSetBlock":{"name":"qmui_viewDidSetBlock","abstract":"<p>当 item 内的 view 生成后就会调用这个 block。</p>","parent_name":"UIBarItem(QMUI)"},"Categories/UIBarItem%28QMUI%29.html#/c:objc(cs)UIBarItem(py)qmui_viewDidLayoutSubviewsBlock":{"name":"qmui_viewDidLayoutSubviewsBlock","abstract":"<p>当 item 内的 view 的 layoutSubviews 被调用后就会调用这个 block，如果某些需求需要依赖于 subviews 的位置，则使用这个 block。如果只是依赖于 item 的 view 的 frame 变化，则可以使用 qmui_viewLayoutDidChangeBlock。</p>","parent_name":"UIBarItem(QMUI)"},"Categories/UIBarItem%28QMUI%29.html#/c:objc(cs)UIBarItem(py)qmui_viewLayoutDidChangeBlock":{"name":"qmui_viewLayoutDidChangeBlock","abstract":"<p>当 item 内的 view 的 frame 发生变化时就会调用这个 block。</p>","parent_name":"UIBarItem(QMUI)"},"Categories/UIActivityIndicatorView%28QMUI%29.html#/c:objc(cs)UIActivityIndicatorView(im)initWithActivityIndicatorStyle:size:":{"name":"-initWithActivityIndicatorStyle:size:","abstract":"<p>创建一个指定大小的UIActivityIndicatorView</p>","parent_name":"UIActivityIndicatorView(QMUI)"},"Categories/UITabBarItem%28QMUI%29.html#/c:objc(cs)UITabBarItem(py)qmui_doubleTapBlock":{"name":"qmui_doubleTapBlock","abstract":"<p>双击 tabBarItem 时的回调，默认为 nil。","parent_name":"UITabBarItem(QMUI)"},"Categories/UITabBarItem%28QMUI%29.html#/c:objc(cs)UITabBarItem(im)qmui_imageView":{"name":"-qmui_imageView","abstract":"<p>获取一个UITabBarItem内显示图标的UIImageView，如果找不到则返回nil</p>","parent_name":"UITabBarItem(QMUI)"},"Categories/NSObject%28QMUITextInput_Private%29.html#/c:objc(cs)NSObject(py)qmui_hasCustomizedKeyboardAppearance":{"name":"qmui_hasCustomizedKeyboardAppearance","abstract":"<p>内部使用，用于标志业务自己修改了 keyboardAppearance 的情况</p>","parent_name":"NSObject(QMUITextInput_Private)"},"Categories/UITextView%28QMUI%29.html#/c:objc(cs)UITextView(im)qmui_convertNSRangeFromUITextRange:":{"name":"-qmui_convertNSRangeFromUITextRange:","abstract":"<p>convert UITextRange to NSRange, for example, [self qmui_convertNSRangeFromUITextRange:self.markedTextRange]</p>","parent_name":"UITextView(QMUI)"},"Categories/UITextView%28QMUI%29.html#/c:objc(cs)UITextView(im)qmui_convertUITextRangeFromNSRange:":{"name":"-qmui_convertUITextRangeFromNSRange:","abstract":"<p>convert NSRange to UITextRange</p>","parent_name":"UITextView(QMUI)"},"Categories/UITextView%28QMUI%29.html#/c:objc(cs)UITextView(im)qmui_setTextKeepingSelectedRange:":{"name":"-qmui_setTextKeepingSelectedRange:","abstract":"<p>设置 text 会让 selectedTextRange 跳到最后一个字符，导致在中间修改文字后光标会跳到末尾，所以设置前要保存一下，设置后恢复过来</p>","parent_name":"UITextView(QMUI)"},"Categories/UITextView%28QMUI%29.html#/c:objc(cs)UITextView(im)qmui_setAttributedTextKeepingSelectedRange:":{"name":"-qmui_setAttributedTextKeepingSelectedRange:","abstract":"<p>设置 attributedText 会让 selectedTextRange 跳到最后一个字符，导致在中间修改文字后光标会跳到末尾，所以设置前要保存一下，设置后恢复过来</p>","parent_name":"UITextView(QMUI)"},"Categories/UITextView%28QMUI%29.html#/c:objc(cs)UITextView(im)qmui_scrollRangeToVisible:":{"name":"-qmui_scrollRangeToVisible:","abstract":"<p>[UITextView scrollRangeToVisible:] 并不会考虑 textContainerInset.bottom，所以使用这个方法来代替</p>","parent_name":"UITextView(QMUI)"},"Categories/UITextView%28QMUI%29.html#/c:objc(cs)UITextView(im)qmui_scrollCaretVisibleAnimated:":{"name":"-qmui_scrollCaretVisibleAnimated:","abstract":"<p>将光标滚到可视区域</p>","parent_name":"UITextView(QMUI)"},"Categories/UISwitch%28QMUI%29.html#/c:objc(cs)UISwitch(py)qmui_offTintColor":{"name":"qmui_offTintColor","abstract":"<p>用于设置 UISwitch 关闭时的背景色（除了圆点外的其他颜色）</p>","parent_name":"UISwitch(QMUI)"},"Categories/NSCharacterSet%28QMUI%29.html#/c:objc(cs)NSCharacterSet(cpy)qmui_URLUserInputQueryAllowedCharacterSet":{"name":"qmui_URLUserInputQueryAllowedCharacterSet","abstract":"<p>也即在系统的 URLQueryAllowedCharacterSet 基础上去掉“#&amp;=”这3个字符，专用于 URL query 里来源于用户输入的 value，避免服务器解析出现异常。</p>","parent_name":"NSCharacterSet(QMUI)"},"Categories/NSAttributedString%28QMUI%29.html#/c:objc(cs)NSAttributedString(im)qmui_lengthWhenCountingNonASCIICharacterAsTwo":{"name":"-qmui_lengthWhenCountingNonASCIICharacterAsTwo","abstract":"<p>按照中文 2 个字符、英文 1 个字符的方式来计算文本长度</p>","parent_name":"NSAttributedString(QMUI)"},"Categories/NSAttributedString%28QMUI%29.html#/c:objc(cs)NSAttributedString(cm)qmui_attributedStringWithImage:":{"name":"+qmui_attributedStringWithImage:","abstract":"<p>@brief 创建一个包含图片的 attributedString</p>","parent_name":"NSAttributedString(QMUI)"},"Categories/NSAttributedString%28QMUI%29.html#/c:objc(cs)NSAttributedString(cm)qmui_attributedStringWithImage:baselineOffset:leftMargin:rightMargin:":{"name":"+qmui_attributedStringWithImage:baselineOffset:leftMargin:rightMargin:","abstract":"<p>@brief 创建一个包含图片的 attributedString</p>","parent_name":"NSAttributedString(QMUI)"},"Categories/NSAttributedString%28QMUI%29.html#/c:objc(cs)NSAttributedString(cm)qmui_attributedStringWithFixedSpace:":{"name":"+qmui_attributedStringWithFixedSpace:","abstract":"<p>@brief 创建一个用来占位的空白 attributedString</p>","parent_name":"NSAttributedString(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_usedAsTableHeaderView":{"name":"qmui_usedAsTableHeaderView","abstract":"<p>当以 tableHeaderView 的方式使用 UISearchBar 时，建议将这个属性置为 YES，从而可以帮你处理 <a href=\"https://github.com/Tencent/QMUI_iOS/issues/233\">https://github.com/Tencent/QMUI_iOS/issues/233</a> 里列出的问题（抖动、iPhone X 适配等），默认为 NO</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_placeholderColor":{"name":"qmui_placeholderColor","abstract":"<p>输入框内 placeholder 的颜色</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_textColor":{"name":"qmui_textColor","abstract":"<p>输入框的文字颜色</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_font":{"name":"qmui_font","abstract":"<p>输入框的文字字体，会同时影响 placeholder 的字体</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_textFieldMargins":{"name":"qmui_textFieldMargins","abstract":"<p>输入框相对于系统原有布局位置的上下左右的偏移，正值表示向内缩小，负值表示向外扩大</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_textField":{"name":"qmui_textField","abstract":"<p>Undocumented</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_backgroundView":{"name":"qmui_backgroundView","abstract":"<p>获取 searchBar 的背景 view，为一个 UIImageView 的子类 UISearchBarBackground，在 searchBar 初始化完即可被获取</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_cancelButton":{"name":"qmui_cancelButton","abstract":"<p>获取 searchBar 内的取消按钮，注意 UISearchBar 的取消按钮是在 setShowsCancelButton:animated: 被调用之后才会生成</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_cancelButtonFont":{"name":"qmui_cancelButtonFont","abstract":"<p>取消按钮的字体，由于系统的 cancelButton 是懒加载的，所以当不存在 cancelButton 时该值为 nil</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_segmentedControl":{"name":"qmui_segmentedControl","abstract":"<p>获取 scopeBar 里的 UISegmentedControl</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(py)qmui_fixMaskViewLayoutBugAutomatically":{"name":"qmui_fixMaskViewLayoutBugAutomatically","abstract":"<p>修复当 UISearchController.searchBar 被当做 tableHeaderView 使用时可能产生的布局问题","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(im)qmui_styledAsQMUISearchBar":{"name":"-qmui_styledAsQMUISearchBar","abstract":"<p>Undocumented</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(cm)qmui_generateTextFieldBackgroundImageWithColor:":{"name":"+qmui_generateTextFieldBackgroundImageWithColor:","abstract":"<p>生成指定颜色的搜索框输入框背景图，大小与系统默认的保持一致，只是颜色不同</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UISearchBar%28QMUI%29.html#/c:objc(cs)UISearchBar(cm)qmui_generateBackgroundImageWithColor:borderColor:":{"name":"+qmui_generateBackgroundImageWithColor:borderColor:","abstract":"<p>生成指定背景色和底部边框颜色的搜索框背景图</p>","parent_name":"UISearchBar(QMUI)"},"Categories/UITableViewCell%28QMUI_Styled%29.html#/c:objc(cs)UITableViewCell(im)qmui_styledAsQMUITableViewCell":{"name":"-qmui_styledAsQMUITableViewCell","abstract":"<p>按照 QMUI 配置表的值来将 cell 设置为全局统一的样式</p>","parent_name":"UITableViewCell(QMUI_Styled)"},"Categories/UITableViewCell%28QMUI_Styled%29.html#/c:objc(cs)UITableViewCell(py)qmui_styledTextLabelColor":{"name":"qmui_styledTextLabelColor","abstract":"<p>Undocumented</p>","parent_name":"UITableViewCell(QMUI_Styled)"},"Categories/UITableViewCell%28QMUI_Styled%29.html#/c:objc(cs)UITableViewCell(py)qmui_styledDetailTextLabelColor":{"name":"qmui_styledDetailTextLabelColor","abstract":"<p>Undocumented</p>","parent_name":"UITableViewCell(QMUI_Styled)"},"Categories/UITableViewCell%28QMUI_Styled%29.html#/c:objc(cs)UITableViewCell(py)qmui_styledBackgroundColor":{"name":"qmui_styledBackgroundColor","abstract":"<p>Undocumented</p>","parent_name":"UITableViewCell(QMUI_Styled)"},"Categories/UITableViewCell%28QMUI_Styled%29.html#/c:objc(cs)UITableViewCell(py)qmui_styledSelectedBackgroundColor":{"name":"qmui_styledSelectedBackgroundColor","abstract":"<p>Undocumented</p>","parent_name":"UITableViewCell(QMUI_Styled)"},"Categories/UITableViewCell%28QMUI_Styled%29.html#/c:objc(cs)UITableViewCell(py)qmui_styledWarningBackgroundColor":{"name":"qmui_styledWarningBackgroundColor","abstract":"<p>Undocumented</p>","parent_name":"UITableViewCell(QMUI_Styled)"},"Categories/UITableViewCell%28QMUI%29.html#/c:objc(cs)UITableViewCell(py)qmui_tableView":{"name":"qmui_tableView","abstract":"<p>获取当前 cell 所在的 tableView，iOS 13 下在 init 时就可以获取到值，而 iOS 12 及以下只能在 cell 被塞给 tableView 后才能获取到值</p>","parent_name":"UITableViewCell(QMUI)"},"Categories/UITableViewCell%28QMUI%29.html#/c:objc(cs)UITableViewCell(py)qmui_selectedBackgroundColor":{"name":"qmui_selectedBackgroundColor","abstract":"<p>设置 cell 点击时的背景色，如果没有 selectedBackgroundView 会创建一个。</p>","parent_name":"UITableViewCell(QMUI)"},"Categories/UITableViewCell%28QMUI%29.html#/c:objc(cs)UITableViewCell(py)qmui_setHighlightedBlock":{"name":"qmui_setHighlightedBlock","abstract":"<p>setHighlighted:animated: 方法的回调 block</p>","parent_name":"UITableViewCell(QMUI)"},"Categories/UITableViewCell%28QMUI%29.html#/c:objc(cs)UITableViewCell(py)qmui_setSelectedBlock":{"name":"qmui_setSelectedBlock","abstract":"<p>setSelected:animated: 方法的回调 block</p>","parent_name":"UITableViewCell(QMUI)"},"Categories/UITableViewCell%28QMUI%29.html#/c:objc(cs)UITableViewCell(py)qmui_accessoryView":{"name":"qmui_accessoryView","abstract":"<p>获取当前 cell 的 accessoryView，优先级分别是：编辑状态下的 editingAccessoryView -&gt; 编辑状态下的系统自己的 accessoryView -&gt; 普通状态下的自定义 accessoryView -&gt; 普通状态下系统自己的 accessoryView</p>","parent_name":"UITableViewCell(QMUI)"},"Categories/UIWindow%28QMUI%29.html#/c:objc(cs)UIWindow(py)qmui_capturesStatusBarAppearance":{"name":"qmui_capturesStatusBarAppearance","abstract":"<p>允许当前 window 接管 statusBar 的样式设置，默认为 YES。</p>","parent_name":"UIWindow(QMUI)"},"Categories/UIBezierPath%28QMUI%29.html#/c:objc(cs)UIBezierPath(cm)qmui_bezierPathWithRoundedRect:cornerRadiusArray:lineWidth:":{"name":"+qmui_bezierPathWithRoundedRect:cornerRadiusArray:lineWidth:","abstract":"<p>创建一条支持四个角的圆角值不相同的路径</p>","parent_name":"UIBezierPath(QMUI)"},"Categories/UITabBarAppearance%28QMUI%29.html#/c:objc(cs)UITabBarAppearance(im)qmui_applyItemAppearanceWithBlock:":{"name":"-qmui_applyItemAppearanceWithBlock:","abstract":"<p>同时设置 stackedLayoutAppearance、inlineLayoutAppearance、compactInlineLayoutAppearance 三个状态下的 itemAppearance</p>","parent_name":"UITabBarAppearance(QMUI)"},"Categories/UITabBar%28QMUI%29.html#/c:objc(cs)UITabBar(py)qmui_backgroundView":{"name":"qmui_backgroundView","abstract":"<p>UITabBar 的背景 view，可能显示磨砂、背景图，顶部有一部分溢出到 UITabBar 外。</p>","parent_name":"UITabBar(QMUI)"},"Categories/UITabBar%28QMUI%29.html#/c:objc(cs)UITabBar(py)qmui_shadowImageView":{"name":"qmui_shadowImageView","abstract":"<p>qmui_backgroundView 内的 subview，用于显示顶部分隔线 shadowImage，注意这个 view 是溢出到 qmui_backgroundView 外的。若 shadowImage 为 [UIImage new]，则这个 view 的高度为 0。</p>","parent_name":"UITabBar(QMUI)"},"Categories/UIView%28QMUI_Debug%29.html#/c:objc(cs)UIView(py)qmui_shouldShowDebugColor":{"name":"qmui_shouldShowDebugColor","abstract":"<p>是否需要添加debug背景色，默认NO</p>","parent_name":"UIView(QMUI_Debug)"},"Categories/UIView%28QMUI_Debug%29.html#/c:objc(cs)UIView(py)qmui_needsDifferentDebugColor":{"name":"qmui_needsDifferentDebugColor","abstract":"<p>是否每个view的背景色随机，如果不随机则统一使用半透明红色，默认NO</p>","parent_name":"UIView(QMUI_Debug)"},"Categories/UIView%28QMUI_Debug%29.html#/c:objc(cs)UIView(py)qmui_hasDebugColor":{"name":"qmui_hasDebugColor","abstract":"<p>标记一个view是否已经被添加了debug背景色，外部一般不使用</p>","parent_name":"UIView(QMUI_Debug)"},"Categories/UIView%28CGAffineTransform%29.html#/c:objc(cs)UIView(py)qmui_scaleX":{"name":"qmui_scaleX","abstract":"<p>获取当前 view 的 transform scale x</p>","parent_name":"UIView(CGAffineTransform)"},"Categories/UIView%28CGAffineTransform%29.html#/c:objc(cs)UIView(py)qmui_scaleY":{"name":"qmui_scaleY","abstract":"<p>获取当前 view 的 transform scale y</p>","parent_name":"UIView(CGAffineTransform)"},"Categories/UIView%28CGAffineTransform%29.html#/c:objc(cs)UIView(py)qmui_translationX":{"name":"qmui_translationX","abstract":"<p>获取当前 view 的 transform translation x</p>","parent_name":"UIView(CGAffineTransform)"},"Categories/UIView%28CGAffineTransform%29.html#/c:objc(cs)UIView(py)qmui_translationY":{"name":"qmui_translationY","abstract":"<p>获取当前 view 的 transform translation y</p>","parent_name":"UIView(CGAffineTransform)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_top":{"name":"qmui_top","abstract":"<p>等价于 CGRectGetMinY(frame)</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_left":{"name":"qmui_left","abstract":"<p>等价于 CGRectGetMinX(frame)</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_bottom":{"name":"qmui_bottom","abstract":"<p>等价于 CGRectGetMaxY(frame)</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_right":{"name":"qmui_right","abstract":"<p>等价于 CGRectGetMaxX(frame)</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_width":{"name":"qmui_width","abstract":"<p>等价于 CGRectGetWidth(frame)</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_height":{"name":"qmui_height","abstract":"<p>等价于 CGRectGetHeight(frame)</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_extendToTop":{"name":"qmui_extendToTop","abstract":"<p>保持其他三个边缘的位置不变的情况下，将顶边缘拓展到某个指定的位置，注意高度会跟随变化。</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_extendToLeft":{"name":"qmui_extendToLeft","abstract":"<p>保持其他三个边缘的位置不变的情况下，将左边缘拓展到某个指定的位置，注意宽度会跟随变化。</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_extendToBottom":{"name":"qmui_extendToBottom","abstract":"<p>保持其他三个边缘的位置不变的情况下，将底边缘拓展到某个指定的位置，注意高度会跟随变化。</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_extendToRight":{"name":"qmui_extendToRight","abstract":"<p>保持其他三个边缘的位置不变的情况下，将右边缘拓展到某个指定的位置，注意宽度会跟随变化。</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_leftWhenCenterInSuperview":{"name":"qmui_leftWhenCenterInSuperview","abstract":"<p>获取当前 view 在 superview 内水平居中时的 left</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Layout%29.html#/c:objc(cs)UIView(py)qmui_topWhenCenterInSuperview":{"name":"qmui_topWhenCenterInSuperview","abstract":"<p>获取当前 view 在 superview 内垂直居中时的 top</p>","parent_name":"UIView(QMUI_Layout)"},"Categories/UIView%28QMUI_Snapshotting%29.html#/c:objc(cs)UIView(im)qmui_snapshotLayerImage":{"name":"-qmui_snapshotLayerImage","abstract":"<p>Undocumented</p>","parent_name":"UIView(QMUI_Snapshotting)"},"Categories/UIView%28QMUI_Snapshotting%29.html#/c:objc(cs)UIView(im)qmui_snapshotImageAfterScreenUpdates:":{"name":"-qmui_snapshotImageAfterScreenUpdates:","abstract":"<p>Undocumented</p>","parent_name":"UIView(QMUI_Snapshotting)"},"Categories/UIView%28QMUI_Border%29.html#/c:objc(cs)UIView(py)qmui_borderLocation":{"name":"qmui_borderLocation","abstract":"<p>设置边框的位置，默认为 QMUIViewBorderLocationInside，与 view.layer.border 一致。</p>","parent_name":"UIView(QMUI_Border)"},"Categories/UIView%28QMUI_Border%29.html#/c:objc(cs)UIView(py)qmui_borderPosition":{"name":"qmui_borderPosition","abstract":"<p>设置边框类型，支持组合，例如：<code>borderPosition = QMUIViewBorderPositionTop|QMUIViewBorderPositionBottom</code>。默认为 QMUIViewBorderPositionNone。</p>","parent_name":"UIView(QMUI_Border)"},"Categories/UIView%28QMUI_Border%29.html#/c:objc(cs)UIView(py)qmui_borderWidth":{"name":"qmui_borderWidth","abstract":"<p>边框的大小，默认为PixelOne。请注意修改 qmui_borderPosition 的值以将边框显示出来。</p>","parent_name":"UIView(QMUI_Border)"},"Categories/UIView%28QMUI_Border%29.html#/c:objc(cs)UIView(py)qmui_borderColor":{"name":"qmui_borderColor","abstract":"<p>边框的颜色，默认为UIColorSeparator。请注意修改 qmui_borderPosition 的值以将边框显示出来。</p>","parent_name":"UIView(QMUI_Border)"},"Categories/UIView%28QMUI_Border%29.html#/c:objc(cs)UIView(py)qmui_dashPhase":{"name":"qmui_dashPhase","abstract":"<p>虚线 : dashPhase默认是0，且当dashPattern设置了才有效","parent_name":"UIView(QMUI_Border)"},"Categories/UIView%28QMUI_Border%29.html#/c:objc(cs)UIView(py)qmui_dashPattern":{"name":"qmui_dashPattern","abstract":"<p>Undocumented</p>","parent_name":"UIView(QMUI_Border)"},"Categories/UIView%28QMUI_Border%29.html#/c:objc(cs)UIView(py)qmui_borderLayer":{"name":"qmui_borderLayer","abstract":"<p>border的layer</p>","parent_name":"UIView(QMUI_Border)"},"Categories/UIView%28QMUI_Runtime%29.html#/c:objc(cs)UIView(im)qmui_hasOverrideUIKitMethod:":{"name":"-qmui_hasOverrideUIKitMethod:","abstract":"<p>判断当前类是否有重写某个指定的 UIView 的方法</p>","parent_name":"UIView(QMUI_Runtime)"},"Categories/UIView%28QMUI_ViewController%29.html#/c:objc(cs)UIView(py)qmui_visible":{"name":"qmui_visible","abstract":"<p>判断当前的 view 是否属于可视（可视的定义为已存在于 view 层级树里，或者在所处的 UIViewController 的 [viewWillAppear, viewWillDisappear) 生命周期之间）</p>","parent_name":"UIView(QMUI_ViewController)"},"Categories/UIView%28QMUI_ViewController%29.html#/c:objc(cs)UIView(py)qmui_isControllerRootView":{"name":"qmui_isControllerRootView","abstract":"<p>当前的 view 是否是某个 UIViewController.view</p>","parent_name":"UIView(QMUI_ViewController)"},"Categories/UIView%28QMUI_ViewController%29.html#/c:objc(cs)UIView(py)qmui_viewController":{"name":"qmui_viewController","abstract":"<p>获取当前 view 所在的 UIViewController，会递归查找 superview，因此注意使用场景不要有过于频繁的调用</p>","parent_name":"UIView(QMUI_ViewController)"},"Categories/UIView%28QMUI_Block%29.html#/c:objc(cs)UIView(py)qmui_frameWillChangeBlock":{"name":"qmui_frameWillChangeBlock","abstract":"<p>在 UIView 的 frame 变化前会调用这个 block，变化途径包括 setFrame:、setBounds:、setCenter:、setTransform:，你可以通过返回一个 rect 来达到修改 frame 的目的，最终执行 [super setFrame:] 时会使用这个 block 的返回值（除了 setTransform: 导致的 frame 变化）。</p>","parent_name":"UIView(QMUI_Block)"},"Categories/UIView%28QMUI_Block%29.html#/c:objc(cs)UIView(py)qmui_frameDidChangeBlock":{"name":"qmui_frameDidChangeBlock","abstract":"<p>在 UIView 的 frame 变化后会调用这个 block，变化途径包括 setFrame:、setBounds:、setCenter:、setTransform:，可用于监听布局的变化，或者在不方便重写 layoutSubviews 时使用这个 block 代替。</p>","parent_name":"UIView(QMUI_Block)"},"Categories/UIView%28QMUI_Block%29.html#/c:objc(cs)UIView(py)qmui_layoutSubviewsBlock":{"name":"qmui_layoutSubviewsBlock","abstract":"<p>在 UIView 的 layoutSubviews 调用后的下一个 runloop 调用。如果不放到下一个 runloop，直接就调用，会导致先于子类重写的 layoutSubviews 就调用，这样就无法获取到正确的 subviews 的布局。</p>","parent_name":"UIView(QMUI_Block)"},"Categories/UIView%28QMUI_Block%29.html#/c:objc(cs)UIView(py)qmui_tintColorDidChangeBlock":{"name":"qmui_tintColorDidChangeBlock","abstract":"<p>当 tintColorDidChange 被调用的时候会调用这个 block，就不用重写方法了</p>","parent_name":"UIView(QMUI_Block)"},"Categories/UIView%28QMUI_Block%29.html#/c:objc(cs)UIView(py)qmui_hitTestBlock":{"name":"qmui_hitTestBlock","abstract":"<p>当 hitTest:withEvent: 被调用时会调用这个 block，就不用重写方法了</p>","parent_name":"UIView(QMUI_Block)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(im)qmui_initWithSize:":{"name":"-qmui_initWithSize:","abstract":"<p>相当于 initWithFrame:CGRectMake(0, 0, size.width, size.height)</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(py)qmui_frameApplyTransform":{"name":"qmui_frameApplyTransform","abstract":"<p>将要设置的 frame 用 CGRectApplyAffineTransformWithAnchorPoint 处理后再设置</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(py)qmui_safeAreaInsets":{"name":"qmui_safeAreaInsets","abstract":"<p>在 iOS 11 及之后的版本，此属性将返回系统已有的 self.safeAreaInsets。在之前的版本此属性返回 UIEdgeInsetsZero</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(py)qmui_tintColorCustomized":{"name":"qmui_tintColorCustomized","abstract":"<p>有修改过 tintColor，则不会再受 superview.tintColor 的影响</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(im)qmui_removeAllSubviews":{"name":"-qmui_removeAllSubviews","abstract":"<p>移除当前所有 subviews</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(im)qmui_convertPoint:toView:":{"name":"-qmui_convertPoint:toView:","abstract":"<p>同 [UIView convertPoint:toView:]，但支持在分属两个不同 window 的 view 之间进行坐标转换，也支持参数 view 直接传一个 window。</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(im)qmui_convertPoint:fromView:":{"name":"-qmui_convertPoint:fromView:","abstract":"<p>同 [UIView convertPoint:fromView:]，但支持在分属两个不同 window 的 view 之间进行坐标转换，也支持参数 view 直接传一个 window。</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(im)qmui_convertRect:toView:":{"name":"-qmui_convertRect:toView:","abstract":"<p>同 [UIView convertRect:toView:]，但支持在分属两个不同 window 的 view 之间进行坐标转换，也支持参数 view 直接传一个 window。</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(im)qmui_convertRect:fromView:":{"name":"-qmui_convertRect:fromView:","abstract":"<p>同 [UIView convertRect:fromView:]，但支持在分属两个不同 window 的 view 之间进行坐标转换，也支持参数 view 直接传一个 window。</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(cm)qmui_animateWithAnimated:duration:delay:options:animations:completion:":{"name":"+qmui_animateWithAnimated:duration:delay:options:animations:completion:","abstract":"<p>Undocumented</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(cm)qmui_animateWithAnimated:duration:animations:completion:":{"name":"+qmui_animateWithAnimated:duration:animations:completion:","abstract":"<p>Undocumented</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(cm)qmui_animateWithAnimated:duration:animations:":{"name":"+qmui_animateWithAnimated:duration:animations:","abstract":"<p>Undocumented</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html#/c:objc(cs)UIView(cm)qmui_animateWithAnimated:duration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:":{"name":"+qmui_animateWithAnimated:duration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:","abstract":"<p>Undocumented</p>","parent_name":"UIView(QMUI)"},"Categories/UIView%28QMUI%29.html":{"name":"UIView(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UIView%28QMUI_Block%29.html":{"name":"UIView(QMUI_Block)","abstract":"<p>Undocumented</p>"},"Categories/UIView%28QMUI_ViewController%29.html":{"name":"UIView(QMUI_ViewController)","abstract":"<p>Undocumented</p>"},"Categories/UIView%28QMUI_Runtime%29.html":{"name":"UIView(QMUI_Runtime)","abstract":"<p>Undocumented</p>"},"Categories/UIView%28QMUI_Border%29.html":{"name":"UIView(QMUI_Border)","abstract":"<p>UIView (QMUI_Border) 为 UIView 方便地显示某几个方向上的边框。</p>"},"Categories/UIView%28QMUI_Snapshotting%29.html":{"name":"UIView(QMUI_Snapshotting)","abstract":"<p>方便地将某个 UIView 截图并转成一个 UIImage，注意如果这个 UIView 本身做了 transform，也不会在截图上反映出来，截图始终都是原始 UIView 的截图。</p>"},"Categories/UIView%28QMUI_Layout%29.html":{"name":"UIView(QMUI_Layout)","abstract":"<p>对 view.frame 操作的简便封装，注意 view 与 view 之间互相计算时，需要保证处于同一个坐标系内。</p>"},"Categories/UIView%28CGAffineTransform%29.html":{"name":"UIView(CGAffineTransform)","abstract":"<p>Undocumented</p>"},"Categories/UIView%28QMUI_Debug%29.html":{"name":"UIView(QMUI_Debug)","abstract":"<p>Debug UIView 的时候用，对某个 view 的 subviews 都添加一个半透明的背景色，方面查看 view 的布局情况</p>"},"Categories/UITabBar%28QMUI%29.html":{"name":"UITabBar(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UITabBarAppearance%28QMUI%29.html":{"name":"UITabBarAppearance(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UIBezierPath%28QMUI%29.html":{"name":"UIBezierPath(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UIWindow%28QMUI%29.html":{"name":"UIWindow(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UITableViewCell%28QMUI%29.html":{"name":"UITableViewCell(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UITableViewCell%28QMUI_Styled%29.html":{"name":"UITableViewCell(QMUI_Styled)","abstract":"<p>Undocumented</p>"},"Categories/UISearchBar%28QMUI%29.html":{"name":"UISearchBar(QMUI)","abstract":"<p>提供更丰富的接口来修改 UISearchBar 的样式，注意大部分接口都同时支持配置表和 UIAppearance，如果有使用配置表并且该项的值不为 nil，则以配置表的值为准。</p>"},"Categories/NSAttributedString%28QMUI%29.html":{"name":"NSAttributedString(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSCharacterSet%28QMUI%29.html":{"name":"NSCharacterSet(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UISwitch%28QMUI%29.html":{"name":"UISwitch(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UITextView%28QMUI%29.html":{"name":"UITextView(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSObject%28QMUITextInput_Private%29.html":{"name":"NSObject(QMUITextInput_Private)","abstract":"<p>Undocumented</p>"},"Categories/UITabBarItem%28QMUI%29.html":{"name":"UITabBarItem(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UIActivityIndicatorView%28QMUI%29.html":{"name":"UIActivityIndicatorView(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UIBarItem%28QMUI%29.html":{"name":"UIBarItem(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSURL%28QMUI%29.html":{"name":"NSURL(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSMutableParagraphStyle%28QMUI%29.html":{"name":"NSMutableParagraphStyle(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSObject%28QMUI%29.html":{"name":"NSObject(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSObject%28QMUI_KeyValueCoding%29.html":{"name":"NSObject(QMUI_KeyValueCoding)","abstract":"<p>Undocumented</p>"},"Categories/NSObject%28QMUI_DataBind%29.html":{"name":"NSObject(QMUI_DataBind)","abstract":"<p>Undocumented</p>"},"Categories/NSObject%28QMUI_Debug%29.html":{"name":"NSObject(QMUI_Debug)","abstract":"<p>Undocumented</p>"},"Categories/NSThread%28QMUI_KVC%29.html":{"name":"NSThread(QMUI_KVC)","abstract":"<p>Undocumented</p>"},"Categories/UIFont%28QMUI%29.html":{"name":"UIFont(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSMethodSignature%28QMUI%29.html":{"name":"NSMethodSignature(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSPointerArray%28QMUI%29.html":{"name":"NSPointerArray(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSString%28QMUI%29.html":{"name":"NSString(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSString%28QMUI_StringFormat%29.html":{"name":"NSString(QMUI_StringFormat)","abstract":"<p>Undocumented</p>"},"Categories/UINavigationController%28QMUI%29.html":{"name":"UINavigationController(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/CALayer%28QMUI%29.html":{"name":"CALayer(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/CALayer%28QMUI_DynamicColor%29.html":{"name":"CALayer(QMUI_DynamicColor)","abstract":"<p>Undocumented</p>"},"Categories/UIControl%28QMUI%29.html":{"name":"UIControl(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UITableView%28QMUI%29.html":{"name":"UITableView(QMUI)","abstract":"<p>这个分类提供额外的功能包括：</p>"},"Categories/UIImage%28QMUI%29.html":{"name":"UIImage(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UINavigationBar%28QMUI%29.html":{"name":"UINavigationBar(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UIColor%28QMUI%29.html":{"name":"UIColor(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSNumber%28QMUI%29.html":{"name":"NSNumber(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UIScrollView%28QMUI%29.html":{"name":"UIScrollView(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/NSArray%28QMUI%29.html":{"name":"NSArray(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UITextField%28QMUI%29.html":{"name":"UITextField(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UIButton%28QMUI%29.html":{"name":"UIButton(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UILabel%28QMUI%29.html":{"name":"UILabel(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UICollectionView%28QMUI%29.html":{"name":"UICollectionView(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UIGestureRecognizer%28QMUI%29.html":{"name":"UIGestureRecognizer(QMUI)","abstract":"<p>Undocumented</p>"},"Categories/UIImageView%28QMUI%29.html":{"name":"UIImageView(QMUI)","abstract":"<p>Undocumented</p>"},"Categories.html":{"name":"Categories","abstract":"<p>The following categories are available globally.</p>"},"Constants.html":{"name":"Constants","abstract":"<p>The following constants are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}
{"Protocols/QMUICustomNavigationBarTransitionDelegate.html#/c:objc(pl)QMUICustomNavigationBarTransitionDelegate(im)preferredNavigationBarHidden":{"name":"-preferredNavigationBarHidden","abstract":"<p>设置每个界面导航栏的显示/隐藏，为了减少对项目的侵入性，默认不开启这个接口的功能，只有当 shouldCustomizeNavigationBarTransitionIfHideable 返回 YES 时才会开启此功能。如果需要全局开启，那么就在 Controller 基类里面返回 YES；如果是老项目并不想全局使用此功能，那么则可以在单独的界面里面开启。</p>","parent_name":"QMUICustomNavigationBarTransitionDelegate"},"Protocols/QMUICustomNavigationBarTransitionDelegate.html#/c:objc(pl)QMUICustomNavigationBarTransitionDelegate(im)shouldCustomizeNavigationBarTransitionIfHideable":{"name":"-shouldCustomizeNavigationBarTransitionIfHideable","abstract":"<p>当切换界面时，如果不同界面导航栏的显隐状态不同，可以通过 shouldCustomizeNavigationBarTransitionIfHideable 设置是否需要接管导航栏的显示和隐藏。从而不需要在各自的界面的 viewWillAppear 和 viewWillDisappear 里面去管理导航栏的状态。</p>","parent_name":"QMUICustomNavigationBarTransitionDelegate"},"Protocols/QMUICustomNavigationBarTransitionDelegate.html#/c:objc(pl)QMUICustomNavigationBarTransitionDelegate(im)customNavigationBarTransitionKey":{"name":"-customNavigationBarTransitionKey","abstract":"<p>设置导航栏转场的时候是否需要使用自定义的 push / pop transition 效果。<br/>","parent_name":"QMUICustomNavigationBarTransitionDelegate"},"Protocols/QMUICustomNavigationBarTransitionDelegate.html#/c:objc(pl)QMUICustomNavigationBarTransitionDelegate(im)containerViewBackgroundColorWhenTransitioning":{"name":"-containerViewBackgroundColorWhenTransitioning","abstract":"<p>自定义navBar效果过程中UINavigationController的containerView的背景色</p>","parent_name":"QMUICustomNavigationBarTransitionDelegate"},"Protocols/QMUINavigationControllerAppearanceDelegate.html#/c:objc(pl)QMUINavigationControllerAppearanceDelegate(im)titleViewTintColor":{"name":"-titleViewTintColor","abstract":"<p>设置 titleView 的 tintColor</p>","parent_name":"QMUINavigationControllerAppearanceDelegate"},"Protocols/QMUINavigationControllerAppearanceDelegate.html#/c:objc(pl)QMUINavigationControllerAppearanceDelegate(im)navigationBarBackgroundImage":{"name":"-navigationBarBackgroundImage","abstract":"<p>设置导航栏的背景图，默认为 NavBarBackgroundImage</p>","parent_name":"QMUINavigationControllerAppearanceDelegate"},"Protocols/QMUINavigationControllerAppearanceDelegate.html#/c:objc(pl)QMUINavigationControllerAppearanceDelegate(im)navigationBarShadowImage":{"name":"-navigationBarShadowImage","abstract":"<p>设置导航栏底部的分隔线图片，默认为 NavBarShadowImage，必须在 navigationBar 设置了背景图后才有效（系统限制如此）</p>","parent_name":"QMUINavigationControllerAppearanceDelegate"},"Protocols/QMUINavigationControllerAppearanceDelegate.html#/c:objc(pl)QMUINavigationControllerAppearanceDelegate(im)navigationBarBarTintColor":{"name":"-navigationBarBarTintColor","abstract":"<p>设置当前导航栏的 barTintColor，默认为 NavBarBarTintColor</p>","parent_name":"QMUINavigationControllerAppearanceDelegate"},"Protocols/QMUINavigationControllerAppearanceDelegate.html#/c:objc(pl)QMUINavigationControllerAppearanceDelegate(im)navigationBarStyle":{"name":"-navigationBarStyle","abstract":"<p>设置当前导航栏的 barStyle，默认为 NavBarStyle</p>","parent_name":"QMUINavigationControllerAppearanceDelegate"},"Protocols/QMUINavigationControllerAppearanceDelegate.html#/c:objc(pl)QMUINavigationControllerAppearanceDelegate(im)navigationBarTintColor":{"name":"-navigationBarTintColor","abstract":"<p>设置当前导航栏的 UIBarButtonItem 的 tintColor，默认为NavBarTintColor</p>","parent_name":"QMUINavigationControllerAppearanceDelegate"},"Protocols/QMUINavigationControllerAppearanceDelegate.html#/c:objc(pl)QMUINavigationControllerAppearanceDelegate(im)backBarButtonItemTitleWithPreviousViewController:":{"name":"-backBarButtonItemTitleWithPreviousViewController:","abstract":"<p>设置系统返回按钮title，如果返回nil则使用系统默认的返回按钮标题。当实现了这个方法时，会无视配置表 NeedsBackBarButtonItemTitle 的值</p>","parent_name":"QMUINavigationControllerAppearanceDelegate"},"Protocols/QMUINavigationControllerTransitionDelegate.html#/c:objc(pl)QMUINavigationControllerTransitionDelegate(im)navigationController:poppingByInteractiveGestureRecognizer:viewControllerWillDisappear:viewControllerWillAppear:":{"name":"-navigationController:poppingByInteractiveGestureRecognizer:viewControllerWillDisappear:viewControllerWillAppear:","abstract":"<p>当前界面正处于手势返回的过程中，可自行通过 gestureRecognizer.state 来区分手势返回的各个阶段。手势返回有多个阶段（手势返回开始、拖拽过程中、松手并成功返回、松手但不切换界面），不同阶段的 viewController 的状态可能不一样。</p>","parent_name":"QMUINavigationControllerTransitionDelegate"},"Protocols/QMUINavigationControllerTransitionDelegate.html#/c:objc(pl)QMUINavigationControllerTransitionDelegate(im)willPopInNavigationControllerWithAnimated:":{"name":"-willPopInNavigationControllerWithAnimated:","abstract":"<p>在 self.navigationController 进行以下 4 个操作前，相应的 viewController 的 willPopInNavigationControllerWithAnimated: 方法会被调用：</p>","parent_name":"QMUINavigationControllerTransitionDelegate"},"Protocols/QMUINavigationControllerTransitionDelegate.html#/c:objc(pl)QMUINavigationControllerTransitionDelegate(im)didPopInNavigationControllerWithAnimated:":{"name":"-didPopInNavigationControllerWithAnimated:","abstract":"<p>在 self.navigationController 进行以下 4 个操作后，相应的 viewController 的 didPopInNavigationControllerWithAnimated: 方法会被调用：</p>","parent_name":"QMUINavigationControllerTransitionDelegate"},"Protocols/QMUINavigationControllerTransitionDelegate.html#/c:objc(pl)QMUINavigationControllerTransitionDelegate(im)viewControllerKeepingAppearWhenSetViewControllersWithAnimated:":{"name":"-viewControllerKeepingAppearWhenSetViewControllersWithAnimated:","abstract":"<p>当通过 setViewControllers:animated: 来修改 viewController 的堆栈时，如果参数 viewControllers.lastObject 与当前的 self.viewControllers.lastObject 不相同，则意味着会产生界面的切换，这种情况系统会自动调用两个切换的界面的生命周期方法，但如果两者相同，则意味着并不会产生界面切换，此时之前就已经在显示的那个 viewController 的 viewWillAppear:、viewDidAppear: 并不会被调用，那如果用户确实需要在这个时候修改一些界面元素，则找不到一个时机。所以这个方法就是提供这样一个时机给用户修改界面元素。</p>","parent_name":"QMUINavigationControllerTransitionDelegate"},"Protocols/QMUINavigationControllerTransitionDelegate.html":{"name":"QMUINavigationControllerTransitionDelegate","abstract":"<p>与 QMUINavigationController push/pop 相关的一些方法</p>"},"Protocols/QMUINavigationControllerAppearanceDelegate.html":{"name":"QMUINavigationControllerAppearanceDelegate","abstract":"<p>与 QMUINavigationController 外观样式相关的方法</p>"},"Protocols/QMUICustomNavigationBarTransitionDelegate.html":{"name":"QMUICustomNavigationBarTransitionDelegate","abstract":"<p>与 QMUINavigationController 控制 navigationBar 显隐/动画相关的方法</p>"},"Protocols.html#/c:objc(pl)QMUINavigationControllerDelegate":{"name":"QMUINavigationControllerDelegate","abstract":"<p>配合 QMUINavigationController 使用，当 navController 里的 UIViewController 实现了这个协议时，则可得到协议里各个方法的功能。"},"Constants.html#/c:@QMUICommonTableViewControllerSectionHeaderIdentifier":{"name":"QMUICommonTableViewControllerSectionHeaderIdentifier","abstract":"<p>Undocumented</p>"},"Constants.html#/c:@QMUICommonTableViewControllerSectionFooterIdentifier":{"name":"QMUICommonTableViewControllerSectionFooterIdentifier","abstract":"<p>Undocumented</p>"},"Classes/QMUITabBarViewController.html#/c:objc(cs)QMUITabBarViewController(im)didInitialize":{"name":"-didInitialize","abstract":"<p>初始化时调用的方法，会在 initWithNibName:bundle: 和 initWithCoder: 这两个指定的初始化方法中被调用，所以子类如果需要同时支持两个初始化方法，则建议把初始化时要做的事情放到这个方法里。否则仅需重写要支持的那个初始化方法即可。","parent_name":"QMUITabBarViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController@_emptyView":{"name":"_emptyView","abstract":"<p>Undocumented</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)initWithNibName:bundle:":{"name":"-initWithNibName:bundle:","abstract":"<p>Undocumented</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)initWithCoder:":{"name":"-initWithCoder:","abstract":"<p>Undocumented</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)didInitialize":{"name":"-didInitialize","abstract":"<p>初始化时调用的方法，会在两个 NS_DESIGNATED_INITIALIZER 方法中被调用，所以子类如果需要同时支持两个 NS_DESIGNATED_INITIALIZER 方法，则建议把初始化时要做的事情放到这个方法里。否则仅需重写要支持的那个 NS_DESIGNATED_INITIALIZER 方法即可。</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(py)titleView":{"name":"titleView","abstract":"<p>QMUICommonViewController默认都会增加一个QMUINavigationTitleView的titleView，然后重写了setTitle来间接设置titleView的值。所以设置title的时候就跟系统的接口一样：self.title = xxx。</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(py)supportedOrientationMask":{"name":"supportedOrientationMask","abstract":"<p>修改当前界面要支持的横竖屏方向，默认为 SupportedOrientationMask</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(py)emptyView":{"name":"emptyView","abstract":"<p>空列表控件，支持显示提示文字、loading、操作按钮，该属性懒加载</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(py)emptyViewShowing":{"name":"emptyViewShowing","abstract":"<p>当前self.emptyView是否显示</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)showEmptyView":{"name":"-showEmptyView","abstract":"<p>显示emptyView","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)showEmptyViewWithLoading":{"name":"-showEmptyViewWithLoading","abstract":"<p>显示loading的emptyView</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)showEmptyViewWithText:detailText:buttonTitle:buttonAction:":{"name":"-showEmptyViewWithText:detailText:buttonTitle:buttonAction:","abstract":"<p>显示带text、detailText、button的emptyView</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)showEmptyViewWithImage:text:detailText:buttonTitle:buttonAction:":{"name":"-showEmptyViewWithImage:text:detailText:buttonTitle:buttonAction:","abstract":"<p>显示带image、text、detailText、button的emptyView</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)showEmptyViewWithLoading:image:text:detailText:buttonTitle:buttonAction:":{"name":"-showEmptyViewWithLoading:image:text:detailText:buttonTitle:buttonAction:","abstract":"<p>显示带loading、image、text、detailText、button的emptyView</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)hideEmptyView":{"name":"-hideEmptyView","abstract":"<p>隐藏emptyView</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)layoutEmptyView":{"name":"-layoutEmptyView","abstract":"<p>布局emptyView，如果emptyView没有被初始化或者没被添加到界面上，则直接忽略掉。</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)initSubviews":{"name":"-initSubviews","abstract":"<p>负责初始化和设置controller里面的view，也就是self.view的subView。目的在于分类代码，所以与view初始化的相关代码都写在这里。</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)setupNavigationItems":{"name":"-setupNavigationItems","abstract":"<p>负责设置和更新navigationItem，包括title、leftBarButtonItem、rightBarButtonItem。viewWillAppear 里面会自动调用，业务也可以在需要的时候自行调用。目的在于分类代码，所有与navigationItem相关的代码都写在这里。在需要修改navigationItem的时候都统一调用这个接口。</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)setupToolbarItems":{"name":"-setupToolbarItems","abstract":"<p>负责设置和更新toolbarItem。在viewWillAppear里面自动调用（因为toolbar是navigationController的，是每个界面公用的，所以必须在每个界面的viewWillAppear时更新，不能放在viewDidLoad里），允许手动调用。目的在于分类代码，所有与toolbarItem相关的代码都写在这里。在需要修改toolbarItem的时候都只调用这个接口。</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)contentSizeCategoryDidChanged:":{"name":"-contentSizeCategoryDidChanged:","abstract":"<p>动态字体的回调函数。</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)updateNavigationBarAppearance":{"name":"-updateNavigationBarAppearance","abstract":"<p>从 QMUINavigationControllerAppearanceDelegate 系列接口获取当前界面希望的导航栏样式并设置到导航栏上</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(py)hideKeyboardTapGestureRecognizer":{"name":"hideKeyboardTapGestureRecognizer","abstract":"<p>在 viewDidLoad 内初始化，并且 gestureRecognizerShouldBegin: 必定返回 NO。</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(py)hideKeyboardManager":{"name":"hideKeyboardManager","abstract":"<p>Undocumented</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonViewController.html#/c:objc(cs)QMUICommonViewController(im)shouldHideKeyboardWhenTouchInView:":{"name":"-shouldHideKeyboardWhenTouchInView:","abstract":"<p>当用户点击界面上某个 view 时，如果此时键盘处于升起状态，则可通过重写这个方法并返回一个 YES 来达到“点击空白区域自动降下键盘”的需求。默认返回 NO，也即不处理键盘。</p>","parent_name":"QMUICommonViewController"},"Classes/QMUICommonTableViewController.html#/c:objc(cs)QMUICommonTableViewController(im)initWithStyle:":{"name":"-initWithStyle:","abstract":"<p>Undocumented</p>","parent_name":"QMUICommonTableViewController"},"Classes/QMUICommonTableViewController.html#/c:objc(cs)QMUICommonTableViewController(im)initWithCoder:":{"name":"-initWithCoder:","abstract":"<p>Undocumented</p>","parent_name":"QMUICommonTableViewController"},"Classes/QMUICommonTableViewController.html#/c:objc(cs)QMUICommonTableViewController(im)didInitializeWithStyle:":{"name":"-didInitializeWithStyle:","abstract":"<p>初始化时调用的方法，会在两个 NS_DESIGNATED_INITIALIZER 方法中被调用，所以子类如果需要同时支持两个 NS_DESIGNATED_INITIALIZER 方法，则建议把初始化时要做的事情放到这个方法里。否则仅需重写要支持的那个 NS_DESIGNATED_INITIALIZER 方法即可。</p>","parent_name":"QMUICommonTableViewController"},"Classes/QMUICommonTableViewController.html#/c:objc(cs)QMUICommonTableViewController(py)style":{"name":"style","abstract":"<p>获取当前的 <code>UITableViewStyle</code></p>","parent_name":"QMUICommonTableViewController"},"Classes/QMUICommonTableViewController.html#/c:objc(cs)QMUICommonTableViewController(py)tableView":{"name":"tableView","abstract":"<p>获取当前的 tableView</p>","parent_name":"QMUICommonTableViewController"},"Classes/QMUICommonTableViewController.html#/c:objc(cs)QMUICommonTableViewController(im)hideTableHeaderViewInitialIfCanWithAnimated:force:":{"name":"-hideTableHeaderViewInitialIfCanWithAnimated:force:","abstract":"<p>Undocumented</p>","parent_name":"QMUICommonTableViewController"},"Classes/QMUICommonTableViewController.html#/c:objc(cs)QMUICommonTableViewController(im)initTableView":{"name":"-initTableView","abstract":"<p>初始化tableView，在initSubViews的时候被自动调用。</p>","parent_name":"QMUICommonTableViewController"},"Classes/QMUICommonTableViewController.html#/c:objc(cs)QMUICommonTableViewController(im)layoutTableView":{"name":"-layoutTableView","abstract":"<p>布局 tableView 的方法独立抽取出来，方便子类在需要自定义 tableView.frame 时能重写并且屏蔽掉 super 的代码。如果不独立一个方法而是放在 viewDidLayoutSubviews 里，子类就很难屏蔽 super 里对 tableView.frame 的修改。","parent_name":"QMUICommonTableViewController"},"Classes/QMUICommonTableViewController.html#/c:objc(cs)QMUICommonTableViewController(im)shouldHideTableHeaderViewInitial":{"name":"-shouldHideTableHeaderViewInitial","abstract":"<p>是否需要在第一次进入界面时将tableHeaderView隐藏（通过调整self.tableView.contentOffset实现）</p>","parent_name":"QMUICommonTableViewController"},"Classes/QMUINavigationController.html#/c:objc(cs)QMUINavigationController(im)didInitialize":{"name":"-didInitialize","abstract":"<p>初始化时调用的方法，会在 initWithNibName:bundle: 和 initWithCoder: 这两个指定的初始化方法中被调用，所以子类如果需要同时支持两个初始化方法，则建议把初始化时要做的事情放到这个方法里。否则仅需重写要支持的那个初始化方法即可。</p>","parent_name":"QMUINavigationController"},"Classes/QMUINavigationController.html#/c:objc(cs)QMUINavigationController(im)willShowViewController:animated:":{"name":"-willShowViewController:animated:","abstract":"<p>每个界面Controller在即将展示的时候被调用，在<code>UINavigationController</code>的方法<code>navigationController:willShowViewController:animated:</code>中会自动被调用，同时因为如果把一个界面dismiss后回来此时并不会调用<code>navigationController:willShowViewController</code>，所以需要在<code>viewWillAppear</code>里面也会调用一次。</p>","parent_name":"QMUINavigationController"},"Classes/QMUINavigationController.html#/c:objc(cs)QMUINavigationController(im)didShowViewController:animated:":{"name":"-didShowViewController:animated:","abstract":"<p>同上</p>","parent_name":"QMUINavigationController"},"Classes/QMUINavigationController.html":{"name":"QMUINavigationController","abstract":"<p>Undocumented</p>"},"Classes/QMUICommonTableViewController.html":{"name":"QMUICommonTableViewController","abstract":"<p>可作为项目内所有 <code>UITableViewController</code> 的基类，注意是继承自 <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/QMUICommonViewController.html\">QMUICommonViewController</a></code> 而不是 <code>UITableViewController</code>。</p>"},"Classes/QMUICommonViewController.html":{"name":"QMUICommonViewController","abstract":"<p>可作为项目内所有 <code>UIViewController</code> 的基类，提供的功能包括：</p>"},"Classes/QMUITabBarViewController.html":{"name":"QMUITabBarViewController","abstract":"<p>建议作为项目里 tabBarController 的基类，内部处理了几件事情：</p>"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Constants.html":{"name":"Constants","abstract":"<p>The following constants are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"}}